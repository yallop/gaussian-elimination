BER MetaOCaml toplevel, version N 102
        OCaml version 4.03.0+dev8-2015-07-15

# # #       val ( !. ) : 'a code -> 'a = <fun>
val resFA1 :
  (Gausselim.FloatArray.contr ->
   Gausselim.OutJustMatrix(Gausselim.FloatArray)(Gausselim.NoDet(Gausselim.FloatDomain)).res)
  code = .<
  fun a_1  ->
    let t_2 = Pervasives.ref 0 in
    let t_3 = Pervasives.ref 0 in
    let t_5 = Array.map (fun x_4  -> Array.copy x_4) (Array.copy a_1) in
    let t_6 = Array.length (Pervasives..() a_1 0) in
    let t_7 = Array.length a_1 in
    while ((! t_3) < t_6) && ((! t_2) < t_7) do
      (let t_8 = ! t_2 in
       let t_9 = ! t_3 in
       let t_10 = Pervasives.ref None in
       let t_16 =
         for j_13 = t_8 to t_7 - 1 do
           (let t_14 = Pervasives..() (Pervasives..() t_5 j_13) t_9 in
            if Pervasives.not (t_14 = 0.)
            then
              match ! t_10 with
              | Some i_15 ->
                  (if
                     (Pervasives.abs_float (Pervasives.snd i_15)) <
                       (Pervasives.abs_float t_14)
                   then t_10 := (Some (j_13, t_14))
                   else ())
              | None  -> t_10 := (Some (j_13, t_14))
            else ())
         done;
         (match ! t_10 with
          | Some i_11 ->
              (if (Pervasives.fst i_11) <> t_8
               then
                 ((let t_12 = Pervasives..() t_5 t_8 in
                   Pervasives..()<- t_5 t_8
                     (Pervasives..() t_5 (Pervasives.fst i_11));
                   Pervasives..()<- t_5 (Pervasives.fst i_11) t_12);
                  ())
               else ();
               Some (Pervasives.snd i_11))
          | None  -> None) in
       (match t_16 with
        | Some i_17 ->
            ((for j_18 = t_8 + 1 to t_7 - 1 do
                if
                  Pervasives.not
                    ((Pervasives..() (Pervasives..() t_5 j_18) t_9) = 0.)
                then
                  (for j_19 = t_9 + 1 to t_6 - 1 do
                     Pervasives..()<- (Pervasives..() t_5 j_18) j_19
                       ((Pervasives..() (Pervasives..() t_5 j_18) j_19) -.
                          (((Pervasives..() (Pervasives..() t_5 j_18) t_9) /.
                              (Pervasives..() (Pervasives..() t_5 t_8) t_9))
                             *.
                             (Pervasives..() (Pervasives..() t_5 t_8) j_19)))
                   done;
                   Pervasives..()<- (Pervasives..() t_5 j_18) t_9 0.)
                else ()
              done;
              ());
             t_2 := ((! t_2) + 1))
        | None  -> ());
       t_3 := ((! t_3) + 1))
      done;
    t_5>.
  
# val resFA2 :
  (Gausselim.FloatArray.contr ->
   Gausselim.OutDet(Gausselim.FloatArray)(Gausselim.FDet).res)
  code = .<
  fun a_20  ->
    let t_21 = Pervasives.ref 0 in
    let t_22 = Pervasives.ref 0 in
    let t_24 = Array.map (fun x_23  -> Array.copy x_23) (Array.copy a_20) in
    let t_25 = Array.length (Pervasives..() a_20 0) in
    let t_26 = Array.length a_20 in
    let t_27 = Pervasives.ref 1. in
    let t_28 = Pervasives.ref 1 in
    while ((! t_22) < t_25) && ((! t_21) < t_26) do
      (let t_29 = ! t_21 in
       let t_30 = ! t_22 in
       let t_31 = Pervasives.ref None in
       let t_37 =
         for j_34 = t_29 to t_26 - 1 do
           (let t_35 = Pervasives..() (Pervasives..() t_24 j_34) t_30 in
            if Pervasives.not (t_35 = 0.)
            then
              match ! t_31 with
              | Some i_36 ->
                  (if
                     (Pervasives.abs_float (Pervasives.snd i_36)) <
                       (Pervasives.abs_float t_35)
                   then t_31 := (Some (j_34, t_35))
                   else ())
              | None  -> t_31 := (Some (j_34, t_35))
            else ())
         done;
         (match ! t_31 with
          | Some i_32 ->
              (if (Pervasives.fst i_32) <> t_29
               then
                 ((let t_33 = Pervasives..() t_24 t_29 in
                   Pervasives..()<- t_24 t_29
                     (Pervasives..() t_24 (Pervasives.fst i_32));
                   Pervasives..()<- t_24 (Pervasives.fst i_32) t_33);
                  t_28 := (- (! t_28)))
               else ();
               Some (Pervasives.snd i_32))
          | None  -> None) in
       (match t_37 with
        | Some i_38 ->
            ((for j_39 = t_29 + 1 to t_26 - 1 do
                if
                  Pervasives.not
                    ((Pervasives..() (Pervasives..() t_24 j_39) t_30) = 0.)
                then
                  (for j_40 = t_30 + 1 to t_25 - 1 do
                     Pervasives..()<- (Pervasives..() t_24 j_39) j_40
                       ((Pervasives..() (Pervasives..() t_24 j_39) j_40) -.
                          (((Pervasives..() (Pervasives..() t_24 j_39) t_30)
                              /.
                              (Pervasives..() (Pervasives..() t_24 t_29) t_30))
                             *.
                             (Pervasives..() (Pervasives..() t_24 t_29) j_40)))
                   done;
                   Pervasives..()<- (Pervasives..() t_24 j_39) t_30 0.)
                else ()
              done;
              t_27 := ((! t_27) *. i_38));
             t_21 := ((! t_21) + 1))
        | None  -> t_28 := 0);
       t_22 := ((! t_22) + 1))
      done;
    (t_24,
      (if (! t_28) = 0
       then 0.
       else if (! t_28) = 1 then ! t_27 else -. (! t_27)))>.
  
# val resFA3 :
  (Gausselim.FloatArray.contr ->
   Gausselim.OutRank(Gausselim.FloatArray)(Gausselim.Rank).res)
  code = .<
  fun a_41  ->
    let t_42 = Pervasives.ref 0 in
    let t_43 = Pervasives.ref 0 in
    let t_45 = Array.map (fun x_44  -> Array.copy x_44) (Array.copy a_41) in
    let t_46 = Array.length (Pervasives..() a_41 0) in
    let t_47 = Array.length a_41 in
    while ((! t_43) < t_46) && ((! t_42) < t_47) do
      (let t_48 = ! t_42 in
       let t_49 = ! t_43 in
       let t_50 = Pervasives.ref None in
       let t_56 =
         for j_53 = t_48 to t_47 - 1 do
           (let t_54 = Pervasives..() (Pervasives..() t_45 j_53) t_49 in
            if Pervasives.not (t_54 = 0.)
            then
              match ! t_50 with
              | Some i_55 ->
                  (if
                     (Pervasives.abs_float (Pervasives.snd i_55)) <
                       (Pervasives.abs_float t_54)
                   then t_50 := (Some (j_53, t_54))
                   else ())
              | None  -> t_50 := (Some (j_53, t_54))
            else ())
         done;
         (match ! t_50 with
          | Some i_51 ->
              (if (Pervasives.fst i_51) <> t_48
               then
                 ((let t_52 = Pervasives..() t_45 t_48 in
                   Pervasives..()<- t_45 t_48
                     (Pervasives..() t_45 (Pervasives.fst i_51));
                   Pervasives..()<- t_45 (Pervasives.fst i_51) t_52);
                  ())
               else ();
               Some (Pervasives.snd i_51))
          | None  -> None) in
       (match t_56 with
        | Some i_57 ->
            ((for j_58 = t_48 + 1 to t_47 - 1 do
                if
                  Pervasives.not
                    ((Pervasives..() (Pervasives..() t_45 j_58) t_49) = 0.)
                then
                  (for j_59 = t_49 + 1 to t_46 - 1 do
                     Pervasives..()<- (Pervasives..() t_45 j_58) j_59
                       ((Pervasives..() (Pervasives..() t_45 j_58) j_59) -.
                          (((Pervasives..() (Pervasives..() t_45 j_58) t_49)
                              /.
                              (Pervasives..() (Pervasives..() t_45 t_48) t_49))
                             *.
                             (Pervasives..() (Pervasives..() t_45 t_48) j_59)))
                   done;
                   Pervasives..()<- (Pervasives..() t_45 j_58) t_49 0.)
                else ()
              done;
              ());
             t_42 := ((! t_42) + 1))
        | None  -> ());
       t_43 := ((! t_43) + 1))
      done;
    (t_45, (! t_42))>.
  
# val resFA4 :
  (Gausselim.FloatArray.contr ->
   Gausselim.OutDetRank(Gausselim.FloatArray)(Gausselim.FDet)(Gausselim.Rank).res)
  code = .<
  fun a_60  ->
    let t_61 = Pervasives.ref 0 in
    let t_62 = Pervasives.ref 0 in
    let t_64 = Array.map (fun x_63  -> Array.copy x_63) (Array.copy a_60) in
    let t_65 = Array.length (Pervasives..() a_60 0) in
    let t_66 = Array.length a_60 in
    let t_67 = Pervasives.ref 1. in
    let t_68 = Pervasives.ref 1 in
    while ((! t_62) < t_65) && ((! t_61) < t_66) do
      (let t_69 = ! t_61 in
       let t_70 = ! t_62 in
       let t_71 = Pervasives.ref None in
       let t_77 =
         for j_74 = t_69 to t_66 - 1 do
           (let t_75 = Pervasives..() (Pervasives..() t_64 j_74) t_70 in
            if Pervasives.not (t_75 = 0.)
            then
              match ! t_71 with
              | Some i_76 ->
                  (if
                     (Pervasives.abs_float (Pervasives.snd i_76)) <
                       (Pervasives.abs_float t_75)
                   then t_71 := (Some (j_74, t_75))
                   else ())
              | None  -> t_71 := (Some (j_74, t_75))
            else ())
         done;
         (match ! t_71 with
          | Some i_72 ->
              (if (Pervasives.fst i_72) <> t_69
               then
                 ((let t_73 = Pervasives..() t_64 t_69 in
                   Pervasives..()<- t_64 t_69
                     (Pervasives..() t_64 (Pervasives.fst i_72));
                   Pervasives..()<- t_64 (Pervasives.fst i_72) t_73);
                  t_68 := (- (! t_68)))
               else ();
               Some (Pervasives.snd i_72))
          | None  -> None) in
       (match t_77 with
        | Some i_78 ->
            ((for j_79 = t_69 + 1 to t_66 - 1 do
                if
                  Pervasives.not
                    ((Pervasives..() (Pervasives..() t_64 j_79) t_70) = 0.)
                then
                  (for j_80 = t_70 + 1 to t_65 - 1 do
                     Pervasives..()<- (Pervasives..() t_64 j_79) j_80
                       ((Pervasives..() (Pervasives..() t_64 j_79) j_80) -.
                          (((Pervasives..() (Pervasives..() t_64 j_79) t_70)
                              /.
                              (Pervasives..() (Pervasives..() t_64 t_69) t_70))
                             *.
                             (Pervasives..() (Pervasives..() t_64 t_69) j_80)))
                   done;
                   Pervasives..()<- (Pervasives..() t_64 j_79) t_70 0.)
                else ()
              done;
              t_67 := ((! t_67) *. i_78));
             t_61 := ((! t_61) + 1))
        | None  -> t_68 := 0);
       t_62 := ((! t_62) + 1))
      done;
    (t_64,
      (if (! t_68) = 0
       then 0.
       else if (! t_68) = 1 then ! t_67 else -. (! t_67)), (! t_61))>.
  
# val resFV1 :
  (Gausselim.FloatVector.contr ->
   Gausselim.OutJustMatrix(Gausselim.FloatVector)(Gausselim.FDet).res)
  code = .<
  fun a_81  ->
    let t_82 = Pervasives.ref 0 in
    let t_83 = Pervasives.ref 0 in
    let t_84 =
      { a_81 with Gausselim_types.arr = (Array.copy a_81.Gausselim_types.arr)
      } in
    let t_85 = a_81.Gausselim_types.m in
    let t_86 = a_81.Gausselim_types.n in
    let t_87 = Pervasives.ref 1. in
    let t_88 = Pervasives.ref 1 in
    while ((! t_83) < t_85) && ((! t_82) < t_86) do
      (let t_89 = ! t_82 in
       let t_90 = ! t_83 in
       let t_91 = Pervasives.ref None in
       let t_103 =
         for j_100 = t_89 to t_86 - 1 do
           (let t_101 =
              Pervasives..() t_84.Gausselim_types.arr
                ((j_100 * t_84.Gausselim_types.m) + t_90) in
            if Pervasives.not (t_101 = 0.)
            then
              match ! t_91 with
              | Some i_102 ->
                  (if
                     (Pervasives.abs_float (Pervasives.snd i_102)) <
                       (Pervasives.abs_float t_101)
                   then t_91 := (Some (j_100, t_101))
                   else ())
              | None  -> t_91 := (Some (j_100, t_101))
            else ())
         done;
         (match ! t_91 with
          | Some i_92 ->
              (if (Pervasives.fst i_92) <> t_89
               then
                 ((let a_93 = t_84.Gausselim_types.arr
                   and n_94 = t_84.Gausselim_types.n
                   and m_95 = t_84.Gausselim_types.m in
                   let i1_96 = t_89 * m_95
                   and i2_97 = (Pervasives.fst i_92) * m_95 in
                   for i_98 = 0 to m_95 - 1 do
                     let t_99 = Pervasives..() a_93 (i1_96 + i_98) in
                     Pervasives..()<- a_93 (i1_96 + i_98)
                       (Pervasives..() a_93 (i2_97 + i_98));
                     Pervasives..()<- a_93 (i2_97 + i_98) t_99
                   done);
                  t_88 := (- (! t_88)))
               else ();
               Some (Pervasives.snd i_92))
          | None  -> None) in
       (match t_103 with
        | Some i_104 ->
            ((for j_105 = t_89 + 1 to t_86 - 1 do
                if
                  Pervasives.not
                    ((Pervasives..() t_84.Gausselim_types.arr
                        ((j_105 * t_84.Gausselim_types.m) + t_90))
                       = 0.)
                then
                  (for j_106 = t_90 + 1 to t_85 - 1 do
                     Pervasives..()<- t_84.Gausselim_types.arr
                       ((j_105 * t_84.Gausselim_types.m) + j_106)
                       ((Pervasives..() t_84.Gausselim_types.arr
                           ((j_105 * t_84.Gausselim_types.m) + j_106))
                          -.
                          (((Pervasives..() t_84.Gausselim_types.arr
                               ((j_105 * t_84.Gausselim_types.m) + t_90))
                              /.
                              (Pervasives..() t_84.Gausselim_types.arr
                                 ((t_89 * t_84.Gausselim_types.m) + t_90)))
                             *.
                             (Pervasives..() t_84.Gausselim_types.arr
                                ((t_89 * t_84.Gausselim_types.m) + j_106))))
                   done;
                   Pervasives..()<- t_84.Gausselim_types.arr
                     ((j_105 * t_84.Gausselim_types.m) + t_90) 0.)
                else ()
              done;
              t_87 := ((! t_87) *. i_104));
             t_82 := ((! t_82) + 1))
        | None  -> t_88 := 0);
       t_83 := ((! t_83) + 1))
      done;
    t_84>.
  
# val resFV2 :
  (Gausselim.FloatVector.contr ->
   Gausselim.OutDet(Gausselim.FloatVector)(Gausselim.FDet).res)
  code = .<
  fun a_107  ->
    let t_108 = Pervasives.ref 0 in
    let t_109 = Pervasives.ref 0 in
    let t_110 =
      {
        a_107 with
        Gausselim_types.arr = (Array.copy a_107.Gausselim_types.arr)
      } in
    let t_111 = a_107.Gausselim_types.m in
    let t_112 = a_107.Gausselim_types.n in
    let t_113 = Pervasives.ref 1. in
    let t_114 = Pervasives.ref 1 in
    while ((! t_109) < t_111) && ((! t_108) < t_112) do
      (let t_115 = ! t_108 in
       let t_116 = ! t_109 in
       let t_117 = Pervasives.ref None in
       let t_129 =
         for j_126 = t_115 to t_112 - 1 do
           (let t_127 =
              Pervasives..() t_110.Gausselim_types.arr
                ((j_126 * t_110.Gausselim_types.m) + t_116) in
            if Pervasives.not (t_127 = 0.)
            then
              match ! t_117 with
              | Some i_128 ->
                  (if
                     (Pervasives.abs_float (Pervasives.snd i_128)) <
                       (Pervasives.abs_float t_127)
                   then t_117 := (Some (j_126, t_127))
                   else ())
              | None  -> t_117 := (Some (j_126, t_127))
            else ())
         done;
         (match ! t_117 with
          | Some i_118 ->
              (if (Pervasives.fst i_118) <> t_115
               then
                 ((let a_119 = t_110.Gausselim_types.arr
                   and n_120 = t_110.Gausselim_types.n
                   and m_121 = t_110.Gausselim_types.m in
                   let i1_122 = t_115 * m_121
                   and i2_123 = (Pervasives.fst i_118) * m_121 in
                   for i_124 = 0 to m_121 - 1 do
                     let t_125 = Pervasives..() a_119 (i1_122 + i_124) in
                     Pervasives..()<- a_119 (i1_122 + i_124)
                       (Pervasives..() a_119 (i2_123 + i_124));
                     Pervasives..()<- a_119 (i2_123 + i_124) t_125
                   done);
                  t_114 := (- (! t_114)))
               else ();
               Some (Pervasives.snd i_118))
          | None  -> None) in
       (match t_129 with
        | Some i_130 ->
            ((for j_131 = t_115 + 1 to t_112 - 1 do
                if
                  Pervasives.not
                    ((Pervasives..() t_110.Gausselim_types.arr
                        ((j_131 * t_110.Gausselim_types.m) + t_116))
                       = 0.)
                then
                  (for j_132 = t_116 + 1 to t_111 - 1 do
                     Pervasives..()<- t_110.Gausselim_types.arr
                       ((j_131 * t_110.Gausselim_types.m) + j_132)
                       ((Pervasives..() t_110.Gausselim_types.arr
                           ((j_131 * t_110.Gausselim_types.m) + j_132))
                          -.
                          (((Pervasives..() t_110.Gausselim_types.arr
                               ((j_131 * t_110.Gausselim_types.m) + t_116))
                              /.
                              (Pervasives..() t_110.Gausselim_types.arr
                                 ((t_115 * t_110.Gausselim_types.m) + t_116)))
                             *.
                             (Pervasives..() t_110.Gausselim_types.arr
                                ((t_115 * t_110.Gausselim_types.m) + j_132))))
                   done;
                   Pervasives..()<- t_110.Gausselim_types.arr
                     ((j_131 * t_110.Gausselim_types.m) + t_116) 0.)
                else ()
              done;
              t_113 := ((! t_113) *. i_130));
             t_108 := ((! t_108) + 1))
        | None  -> t_114 := 0);
       t_109 := ((! t_109) + 1))
      done;
    (t_110,
      (if (! t_114) = 0
       then 0.
       else if (! t_114) = 1 then ! t_113 else -. (! t_113)))>.
  
# val resFV3 :
  (Gausselim.FloatVector.contr ->
   Gausselim.OutRank(Gausselim.FloatVector)(Gausselim.Rank).res)
  code = .<
  fun a_133  ->
    let t_134 = Pervasives.ref 0 in
    let t_135 = Pervasives.ref 0 in
    let t_136 =
      {
        a_133 with
        Gausselim_types.arr = (Array.copy a_133.Gausselim_types.arr)
      } in
    let t_137 = a_133.Gausselim_types.m in
    let t_138 = a_133.Gausselim_types.n in
    while ((! t_135) < t_137) && ((! t_134) < t_138) do
      (let t_139 = ! t_134 in
       let t_140 = ! t_135 in
       let t_141 = Pervasives.ref None in
       let t_153 =
         for j_150 = t_139 to t_138 - 1 do
           (let t_151 =
              Pervasives..() t_136.Gausselim_types.arr
                ((j_150 * t_136.Gausselim_types.m) + t_140) in
            if Pervasives.not (t_151 = 0.)
            then
              match ! t_141 with
              | Some i_152 ->
                  (if
                     (Pervasives.abs_float (Pervasives.snd i_152)) <
                       (Pervasives.abs_float t_151)
                   then t_141 := (Some (j_150, t_151))
                   else ())
              | None  -> t_141 := (Some (j_150, t_151))
            else ())
         done;
         (match ! t_141 with
          | Some i_142 ->
              (if (Pervasives.fst i_142) <> t_139
               then
                 ((let a_143 = t_136.Gausselim_types.arr
                   and n_144 = t_136.Gausselim_types.n
                   and m_145 = t_136.Gausselim_types.m in
                   let i1_146 = t_139 * m_145
                   and i2_147 = (Pervasives.fst i_142) * m_145 in
                   for i_148 = 0 to m_145 - 1 do
                     let t_149 = Pervasives..() a_143 (i1_146 + i_148) in
                     Pervasives..()<- a_143 (i1_146 + i_148)
                       (Pervasives..() a_143 (i2_147 + i_148));
                     Pervasives..()<- a_143 (i2_147 + i_148) t_149
                   done);
                  ())
               else ();
               Some (Pervasives.snd i_142))
          | None  -> None) in
       (match t_153 with
        | Some i_154 ->
            ((for j_155 = t_139 + 1 to t_138 - 1 do
                if
                  Pervasives.not
                    ((Pervasives..() t_136.Gausselim_types.arr
                        ((j_155 * t_136.Gausselim_types.m) + t_140))
                       = 0.)
                then
                  (for j_156 = t_140 + 1 to t_137 - 1 do
                     Pervasives..()<- t_136.Gausselim_types.arr
                       ((j_155 * t_136.Gausselim_types.m) + j_156)
                       ((Pervasives..() t_136.Gausselim_types.arr
                           ((j_155 * t_136.Gausselim_types.m) + j_156))
                          -.
                          (((Pervasives..() t_136.Gausselim_types.arr
                               ((j_155 * t_136.Gausselim_types.m) + t_140))
                              /.
                              (Pervasives..() t_136.Gausselim_types.arr
                                 ((t_139 * t_136.Gausselim_types.m) + t_140)))
                             *.
                             (Pervasives..() t_136.Gausselim_types.arr
                                ((t_139 * t_136.Gausselim_types.m) + j_156))))
                   done;
                   Pervasives..()<- t_136.Gausselim_types.arr
                     ((j_155 * t_136.Gausselim_types.m) + t_140) 0.)
                else ()
              done;
              ());
             t_134 := ((! t_134) + 1))
        | None  -> ());
       t_135 := ((! t_135) + 1))
      done;
    (t_136, (! t_134))>.
  
# val resFV4 :
  (Gausselim.FloatVector.contr ->
   Gausselim.OutDetRank(Gausselim.FloatVector)(Gausselim.FDet)(Gausselim.Rank).res)
  code = .<
  fun a_157  ->
    let t_158 = Pervasives.ref 0 in
    let t_159 = Pervasives.ref 0 in
    let t_160 =
      {
        a_157 with
        Gausselim_types.arr = (Array.copy a_157.Gausselim_types.arr)
      } in
    let t_161 = a_157.Gausselim_types.m in
    let t_162 = a_157.Gausselim_types.n in
    let t_163 = Pervasives.ref 1. in
    let t_164 = Pervasives.ref 1 in
    while ((! t_159) < t_161) && ((! t_158) < t_162) do
      (let t_165 = ! t_158 in
       let t_166 = ! t_159 in
       let t_167 = Pervasives.ref None in
       let t_179 =
         for j_176 = t_165 to t_162 - 1 do
           (let t_177 =
              Pervasives..() t_160.Gausselim_types.arr
                ((j_176 * t_160.Gausselim_types.m) + t_166) in
            if Pervasives.not (t_177 = 0.)
            then
              match ! t_167 with
              | Some i_178 ->
                  (if
                     (Pervasives.abs_float (Pervasives.snd i_178)) <
                       (Pervasives.abs_float t_177)
                   then t_167 := (Some (j_176, t_177))
                   else ())
              | None  -> t_167 := (Some (j_176, t_177))
            else ())
         done;
         (match ! t_167 with
          | Some i_168 ->
              (if (Pervasives.fst i_168) <> t_165
               then
                 ((let a_169 = t_160.Gausselim_types.arr
                   and n_170 = t_160.Gausselim_types.n
                   and m_171 = t_160.Gausselim_types.m in
                   let i1_172 = t_165 * m_171
                   and i2_173 = (Pervasives.fst i_168) * m_171 in
                   for i_174 = 0 to m_171 - 1 do
                     let t_175 = Pervasives..() a_169 (i1_172 + i_174) in
                     Pervasives..()<- a_169 (i1_172 + i_174)
                       (Pervasives..() a_169 (i2_173 + i_174));
                     Pervasives..()<- a_169 (i2_173 + i_174) t_175
                   done);
                  t_164 := (- (! t_164)))
               else ();
               Some (Pervasives.snd i_168))
          | None  -> None) in
       (match t_179 with
        | Some i_180 ->
            ((for j_181 = t_165 + 1 to t_162 - 1 do
                if
                  Pervasives.not
                    ((Pervasives..() t_160.Gausselim_types.arr
                        ((j_181 * t_160.Gausselim_types.m) + t_166))
                       = 0.)
                then
                  (for j_182 = t_166 + 1 to t_161 - 1 do
                     Pervasives..()<- t_160.Gausselim_types.arr
                       ((j_181 * t_160.Gausselim_types.m) + j_182)
                       ((Pervasives..() t_160.Gausselim_types.arr
                           ((j_181 * t_160.Gausselim_types.m) + j_182))
                          -.
                          (((Pervasives..() t_160.Gausselim_types.arr
                               ((j_181 * t_160.Gausselim_types.m) + t_166))
                              /.
                              (Pervasives..() t_160.Gausselim_types.arr
                                 ((t_165 * t_160.Gausselim_types.m) + t_166)))
                             *.
                             (Pervasives..() t_160.Gausselim_types.arr
                                ((t_165 * t_160.Gausselim_types.m) + j_182))))
                   done;
                   Pervasives..()<- t_160.Gausselim_types.arr
                     ((j_181 * t_160.Gausselim_types.m) + t_166) 0.)
                else ()
              done;
              t_163 := ((! t_163) *. i_180));
             t_158 := ((! t_158) + 1))
        | None  -> t_164 := 0);
       t_159 := ((! t_159) + 1))
      done;
    (t_160,
      (if (! t_164) = 0
       then 0.
       else if (! t_164) = 1 then ! t_163 else -. (! t_163)), (! t_158))>.
  
# val resFV5 :
  (Gausselim.FloatVector.contr ->
   Gausselim.OutDetRank(Gausselim.FloatVector)(Gausselim.FDet)(Gausselim.Rank).res)
  code = .<
  fun a_183  ->
    let t_184 = Pervasives.ref 0 in
    let t_185 = Pervasives.ref 0 in
    let t_186 =
      {
        a_183 with
        Gausselim_types.arr = (Array.copy a_183.Gausselim_types.arr)
      } in
    let t_187 = a_183.Gausselim_types.m in
    let t_188 = a_183.Gausselim_types.n in
    let t_189 = Pervasives.ref 1. in
    let t_190 = Pervasives.ref 1 in
    while ((! t_185) < t_187) && ((! t_184) < t_188) do
      (let t_191 = ! t_184 in
       let t_192 = ! t_185 in
       let t_193 = Pervasives.ref None in
       let t_213 =
         for j_209 = t_191 to t_188 - 1 do
           for j_210 = t_192 to t_187 - 1 do
             (let t_211 =
                Pervasives..() t_186.Gausselim_types.arr
                  ((j_209 * t_186.Gausselim_types.m) + j_210) in
              if Pervasives.not (t_211 = 0.)
              then
                match ! t_193 with
                | Some i_212 ->
                    (if
                       (Pervasives.abs_float (Pervasives.snd i_212)) <
                         (Pervasives.abs_float t_211)
                     then t_193 := (Some ((j_209, j_210), t_211))
                     else ())
                | None  -> t_193 := (Some ((j_209, j_210), t_211))
              else ())
           done
         done;
         (match ! t_193 with
          | Some i_194 ->
              (if (Pervasives.snd (Pervasives.fst i_194)) <> t_192
               then
                 ((let a_202 = t_186.Gausselim_types.arr
                   and nm_203 =
                     t_186.Gausselim_types.n * t_186.Gausselim_types.m
                   and m_204 = t_186.Gausselim_types.m in
                   let rec loop_205 i1_206 i2_207 =
                     if i2_207 < nm_203
                     then
                       let t_208 = Pervasives..() a_202 i1_206 in
                       (Pervasives..()<- a_202 i1_206
                          (Pervasives..() a_202 i2_207);
                        Pervasives..()<- a_202 i2_207 t_208;
                        loop_205 (i1_206 + m_204) (i2_207 + m_204)) in
                   loop_205 t_192 (Pervasives.snd (Pervasives.fst i_194)));
                  t_190 := (- (! t_190)))
               else ();
               if (Pervasives.fst (Pervasives.fst i_194)) <> t_191
               then
                 ((let a_195 = t_186.Gausselim_types.arr
                   and n_196 = t_186.Gausselim_types.n
                   and m_197 = t_186.Gausselim_types.m in
                   let i1_198 = t_191 * m_197
                   and i2_199 =
                     (Pervasives.fst (Pervasives.fst i_194)) * m_197 in
                   for i_200 = 0 to m_197 - 1 do
                     let t_201 = Pervasives..() a_195 (i1_198 + i_200) in
                     Pervasives..()<- a_195 (i1_198 + i_200)
                       (Pervasives..() a_195 (i2_199 + i_200));
                     Pervasives..()<- a_195 (i2_199 + i_200) t_201
                   done);
                  t_190 := (- (! t_190)))
               else ();
               Some (Pervasives.snd i_194))
          | None  -> None) in
       (match t_213 with
        | Some i_214 ->
            ((for j_215 = t_191 + 1 to t_188 - 1 do
                if
                  Pervasives.not
                    ((Pervasives..() t_186.Gausselim_types.arr
                        ((j_215 * t_186.Gausselim_types.m) + t_192))
                       = 0.)
                then
                  (for j_216 = t_192 + 1 to t_187 - 1 do
                     Pervasives..()<- t_186.Gausselim_types.arr
                       ((j_215 * t_186.Gausselim_types.m) + j_216)
                       ((Pervasives..() t_186.Gausselim_types.arr
                           ((j_215 * t_186.Gausselim_types.m) + j_216))
                          -.
                          (((Pervasives..() t_186.Gausselim_types.arr
                               ((j_215 * t_186.Gausselim_types.m) + t_192))
                              /.
                              (Pervasives..() t_186.Gausselim_types.arr
                                 ((t_191 * t_186.Gausselim_types.m) + t_192)))
                             *.
                             (Pervasives..() t_186.Gausselim_types.arr
                                ((t_191 * t_186.Gausselim_types.m) + j_216))))
                   done;
                   Pervasives..()<- t_186.Gausselim_types.arr
                     ((j_215 * t_186.Gausselim_types.m) + t_192) 0.)
                else ()
              done;
              t_189 := ((! t_189) *. i_214));
             t_184 := ((! t_184) + 1))
        | None  -> t_190 := 0);
       t_185 := ((! t_185) + 1))
      done;
    (t_186,
      (if (! t_190) = 0
       then 0.
       else if (! t_190) = 1 then ! t_189 else -. (! t_189)), (! t_184))>.
  
# val resIA1 :
  (Gausselim.IntegerArray.contr ->
   Gausselim.OutJustMatrix(Gausselim.IntegerArray)(Gausselim.IDet).res)
  code = .<
  fun a_217  ->
    let t_218 = Pervasives.ref 0 in
    let t_219 = Pervasives.ref 0 in
    let t_221 = Array.map (fun x_220  -> Array.copy x_220) (Array.copy a_217) in
    let t_222 = Array.length (Pervasives..() a_217 0) in
    let t_223 = Array.length a_217 in
    let t_224 = Pervasives.ref 1 in
    let t_225 = Pervasives.ref 1 in
    while ((! t_219) < t_222) && ((! t_218) < t_223) do
      (let t_226 = ! t_218 in
       let t_227 = ! t_219 in
       let t_228 = Pervasives.ref None in
       let t_234 =
         for j_231 = t_226 to t_223 - 1 do
           (let t_232 = Pervasives..() (Pervasives..() t_221 j_231) t_227 in
            if Pervasives.not (t_232 = 0)
            then
              match ! t_228 with
              | Some i_233 ->
                  (if
                     (Pervasives.abs (Pervasives.snd i_233)) >
                       (Pervasives.abs t_232)
                   then t_228 := (Some (j_231, t_232))
                   else ())
              | None  -> t_228 := (Some (j_231, t_232))
            else ())
         done;
         (match ! t_228 with
          | Some i_229 ->
              (if (Pervasives.fst i_229) <> t_226
               then
                 ((let t_230 = Pervasives..() t_221 t_226 in
                   Pervasives..()<- t_221 t_226
                     (Pervasives..() t_221 (Pervasives.fst i_229));
                   Pervasives..()<- t_221 (Pervasives.fst i_229) t_230);
                  t_225 := (- (! t_225)))
               else ();
               Some (Pervasives.snd i_229))
          | None  -> None) in
       (match t_234 with
        | Some i_235 ->
            ((for j_236 = t_226 + 1 to t_223 - 1 do
                if
                  Pervasives.not
                    ((Pervasives..() (Pervasives..() t_221 j_236) t_227) = 0)
                then
                  (for j_237 = t_227 + 1 to t_222 - 1 do
                     Pervasives..()<- (Pervasives..() t_221 j_236) j_237
                       ((((Pervasives..() (Pervasives..() t_221 j_236) j_237)
                            *
                            (Pervasives..() (Pervasives..() t_221 t_226)
                               t_227))
                           -
                           ((Pervasives..() (Pervasives..() t_221 t_226)
                               j_237)
                              *
                              (Pervasives..() (Pervasives..() t_221 j_236)
                                 t_226)))
                          / (! t_224))
                   done;
                   Pervasives..()<- (Pervasives..() t_221 j_236) t_227 0)
                else ()
              done;
              t_224 := i_235);
             t_218 := ((! t_218) + 1))
        | None  -> t_225 := 0);
       t_219 := ((! t_219) + 1))
      done;
    t_221>.
  
# val resIA2 :
  (Gausselim.IntegerArray.contr ->
   Gausselim.OutDet(Gausselim.IntegerArray)(Gausselim.IDet).res)
  code = .<
  fun a_238  ->
    let t_239 = Pervasives.ref 0 in
    let t_240 = Pervasives.ref 0 in
    let t_242 = Array.map (fun x_241  -> Array.copy x_241) (Array.copy a_238) in
    let t_243 = Array.length (Pervasives..() a_238 0) in
    let t_244 = Array.length a_238 in
    let t_245 = Pervasives.ref 1 in
    let t_246 = Pervasives.ref 1 in
    while ((! t_240) < t_243) && ((! t_239) < t_244) do
      (let t_247 = ! t_239 in
       let t_248 = ! t_240 in
       let t_249 = Pervasives.ref None in
       let t_255 =
         for j_252 = t_247 to t_244 - 1 do
           (let t_253 = Pervasives..() (Pervasives..() t_242 j_252) t_248 in
            if Pervasives.not (t_253 = 0)
            then
              match ! t_249 with
              | Some i_254 ->
                  (if
                     (Pervasives.abs (Pervasives.snd i_254)) >
                       (Pervasives.abs t_253)
                   then t_249 := (Some (j_252, t_253))
                   else ())
              | None  -> t_249 := (Some (j_252, t_253))
            else ())
         done;
         (match ! t_249 with
          | Some i_250 ->
              (if (Pervasives.fst i_250) <> t_247
               then
                 ((let t_251 = Pervasives..() t_242 t_247 in
                   Pervasives..()<- t_242 t_247
                     (Pervasives..() t_242 (Pervasives.fst i_250));
                   Pervasives..()<- t_242 (Pervasives.fst i_250) t_251);
                  t_246 := (- (! t_246)))
               else ();
               Some (Pervasives.snd i_250))
          | None  -> None) in
       (match t_255 with
        | Some i_256 ->
            ((for j_257 = t_247 + 1 to t_244 - 1 do
                if
                  Pervasives.not
                    ((Pervasives..() (Pervasives..() t_242 j_257) t_248) = 0)
                then
                  (for j_258 = t_248 + 1 to t_243 - 1 do
                     Pervasives..()<- (Pervasives..() t_242 j_257) j_258
                       ((((Pervasives..() (Pervasives..() t_242 j_257) j_258)
                            *
                            (Pervasives..() (Pervasives..() t_242 t_247)
                               t_248))
                           -
                           ((Pervasives..() (Pervasives..() t_242 t_247)
                               j_258)
                              *
                              (Pervasives..() (Pervasives..() t_242 j_257)
                                 t_247)))
                          / (! t_245))
                   done;
                   Pervasives..()<- (Pervasives..() t_242 j_257) t_248 0)
                else ()
              done;
              t_245 := i_256);
             t_239 := ((! t_239) + 1))
        | None  -> t_246 := 0);
       t_240 := ((! t_240) + 1))
      done;
    (t_242,
      (if (! t_246) = 0
       then 0
       else if (! t_246) = 1 then ! t_245 else - (! t_245)))>.
  
# val resIA3 :
  (Gausselim.IntegerArray.contr ->
   Gausselim.OutRank(Gausselim.IntegerArray)(Gausselim.Rank).res)
  code = .<
  fun a_259  ->
    let t_260 = Pervasives.ref 0 in
    let t_261 = Pervasives.ref 0 in
    let t_263 = Array.map (fun x_262  -> Array.copy x_262) (Array.copy a_259) in
    let t_264 = Array.length (Pervasives..() a_259 0) in
    let t_265 = Array.length a_259 in
    let t_266 = Pervasives.ref 1 in
    let t_267 = Pervasives.ref 1 in
    while ((! t_261) < t_264) && ((! t_260) < t_265) do
      (let t_268 = ! t_260 in
       let t_269 = ! t_261 in
       let t_270 = Pervasives.ref None in
       let t_276 =
         for j_273 = t_268 to t_265 - 1 do
           (let t_274 = Pervasives..() (Pervasives..() t_263 j_273) t_269 in
            if Pervasives.not (t_274 = 0)
            then
              match ! t_270 with
              | Some i_275 ->
                  (if
                     (Pervasives.abs (Pervasives.snd i_275)) >
                       (Pervasives.abs t_274)
                   then t_270 := (Some (j_273, t_274))
                   else ())
              | None  -> t_270 := (Some (j_273, t_274))
            else ())
         done;
         (match ! t_270 with
          | Some i_271 ->
              (if (Pervasives.fst i_271) <> t_268
               then
                 ((let t_272 = Pervasives..() t_263 t_268 in
                   Pervasives..()<- t_263 t_268
                     (Pervasives..() t_263 (Pervasives.fst i_271));
                   Pervasives..()<- t_263 (Pervasives.fst i_271) t_272);
                  ())
               else ();
               Some (Pervasives.snd i_271))
          | None  -> None) in
       (match t_276 with
        | Some i_277 ->
            ((for j_278 = t_268 + 1 to t_265 - 1 do
                if
                  Pervasives.not
                    ((Pervasives..() (Pervasives..() t_263 j_278) t_269) = 0)
                then
                  (for j_279 = t_269 + 1 to t_264 - 1 do
                     Pervasives..()<- (Pervasives..() t_263 j_278) j_279
                       ((((Pervasives..() (Pervasives..() t_263 j_278) j_279)
                            *
                            (Pervasives..() (Pervasives..() t_263 t_268)
                               t_269))
                           -
                           ((Pervasives..() (Pervasives..() t_263 t_268)
                               j_279)
                              *
                              (Pervasives..() (Pervasives..() t_263 j_278)
                                 t_268)))
                          / (! t_266))
                   done;
                   Pervasives..()<- (Pervasives..() t_263 j_278) t_269 0)
                else ()
              done;
              t_266 := i_277);
             t_260 := ((! t_260) + 1))
        | None  -> t_267 := 0);
       t_261 := ((! t_261) + 1))
      done;
    (t_263, (! t_260))>.
  
# val resIA4 :
  (Gausselim.IntegerArray.contr ->
   Gausselim.OutDetRank(Gausselim.IntegerArray)(Gausselim.IDet)(Gausselim.Rank).res)
  code = .<
  fun a_280  ->
    let t_281 = Pervasives.ref 0 in
    let t_282 = Pervasives.ref 0 in
    let t_284 = Array.map (fun x_283  -> Array.copy x_283) (Array.copy a_280) in
    let t_285 = Array.length (Pervasives..() a_280 0) in
    let t_286 = Array.length a_280 in
    let t_287 = Pervasives.ref 1 in
    let t_288 = Pervasives.ref 1 in
    while ((! t_282) < t_285) && ((! t_281) < t_286) do
      (let t_289 = ! t_281 in
       let t_290 = ! t_282 in
       let t_291 = Pervasives.ref None in
       let t_297 =
         for j_294 = t_289 to t_286 - 1 do
           (let t_295 = Pervasives..() (Pervasives..() t_284 j_294) t_290 in
            if Pervasives.not (t_295 = 0)
            then
              match ! t_291 with
              | Some i_296 ->
                  (if
                     (Pervasives.abs (Pervasives.snd i_296)) >
                       (Pervasives.abs t_295)
                   then t_291 := (Some (j_294, t_295))
                   else ())
              | None  -> t_291 := (Some (j_294, t_295))
            else ())
         done;
         (match ! t_291 with
          | Some i_292 ->
              (if (Pervasives.fst i_292) <> t_289
               then
                 ((let t_293 = Pervasives..() t_284 t_289 in
                   Pervasives..()<- t_284 t_289
                     (Pervasives..() t_284 (Pervasives.fst i_292));
                   Pervasives..()<- t_284 (Pervasives.fst i_292) t_293);
                  t_288 := (- (! t_288)))
               else ();
               Some (Pervasives.snd i_292))
          | None  -> None) in
       (match t_297 with
        | Some i_298 ->
            ((for j_299 = t_289 + 1 to t_286 - 1 do
                if
                  Pervasives.not
                    ((Pervasives..() (Pervasives..() t_284 j_299) t_290) = 0)
                then
                  (for j_300 = t_290 + 1 to t_285 - 1 do
                     Pervasives..()<- (Pervasives..() t_284 j_299) j_300
                       ((((Pervasives..() (Pervasives..() t_284 j_299) j_300)
                            *
                            (Pervasives..() (Pervasives..() t_284 t_289)
                               t_290))
                           -
                           ((Pervasives..() (Pervasives..() t_284 t_289)
                               j_300)
                              *
                              (Pervasives..() (Pervasives..() t_284 j_299)
                                 t_289)))
                          / (! t_287))
                   done;
                   Pervasives..()<- (Pervasives..() t_284 j_299) t_290 0)
                else ()
              done;
              t_287 := i_298);
             t_281 := ((! t_281) + 1))
        | None  -> t_288 := 0);
       t_282 := ((! t_282) + 1))
      done;
    (t_284,
      (if (! t_288) = 0
       then 0
       else if (! t_288) = 1 then ! t_287 else - (! t_287)), (! t_281))>.
  
# val resIV1 :
  (Gausselim.IntegerVector.contr ->
   Gausselim.OutJustMatrix(Gausselim.IntegerVector)(Gausselim.NoDet(Gausselim.IntegerDomain)).res)
  code = .<
  fun a_301  ->
    let t_302 = Pervasives.ref 0 in
    let t_303 = Pervasives.ref 0 in
    let t_304 =
      {
        a_301 with
        Gausselim_types.arr = (Array.copy a_301.Gausselim_types.arr)
      } in
    let t_305 = a_301.Gausselim_types.m in
    let t_306 = a_301.Gausselim_types.n in
    let t_307 = Pervasives.ref 1 in
    let t_308 = Pervasives.ref 1 in
    while ((! t_303) < t_305) && ((! t_302) < t_306) do
      (let t_309 = ! t_302 in
       let t_310 = ! t_303 in
       let t_311 = Pervasives.ref None in
       let t_323 =
         for j_320 = t_309 to t_306 - 1 do
           (let t_321 =
              Pervasives..() t_304.Gausselim_types.arr
                ((j_320 * t_304.Gausselim_types.m) + t_310) in
            if Pervasives.not (t_321 = 0)
            then
              match ! t_311 with
              | Some i_322 ->
                  (if
                     (Pervasives.abs (Pervasives.snd i_322)) >
                       (Pervasives.abs t_321)
                   then t_311 := (Some (j_320, t_321))
                   else ())
              | None  -> t_311 := (Some (j_320, t_321))
            else ())
         done;
         (match ! t_311 with
          | Some i_312 ->
              (if (Pervasives.fst i_312) <> t_309
               then
                 ((let a_313 = t_304.Gausselim_types.arr
                   and n_314 = t_304.Gausselim_types.n
                   and m_315 = t_304.Gausselim_types.m in
                   let i1_316 = t_309 * m_315
                   and i2_317 = (Pervasives.fst i_312) * m_315 in
                   for i_318 = 0 to m_315 - 1 do
                     let t_319 = Pervasives..() a_313 (i1_316 + i_318) in
                     Pervasives..()<- a_313 (i1_316 + i_318)
                       (Pervasives..() a_313 (i2_317 + i_318));
                     Pervasives..()<- a_313 (i2_317 + i_318) t_319
                   done);
                  ())
               else ();
               Some (Pervasives.snd i_312))
          | None  -> None) in
       (match t_323 with
        | Some i_324 ->
            ((for j_325 = t_309 + 1 to t_306 - 1 do
                if
                  Pervasives.not
                    ((Pervasives..() t_304.Gausselim_types.arr
                        ((j_325 * t_304.Gausselim_types.m) + t_310))
                       = 0)
                then
                  (for j_326 = t_310 + 1 to t_305 - 1 do
                     Pervasives..()<- t_304.Gausselim_types.arr
                       ((j_325 * t_304.Gausselim_types.m) + j_326)
                       ((((Pervasives..() t_304.Gausselim_types.arr
                             ((j_325 * t_304.Gausselim_types.m) + j_326))
                            *
                            (Pervasives..() t_304.Gausselim_types.arr
                               ((t_309 * t_304.Gausselim_types.m) + t_310)))
                           -
                           ((Pervasives..() t_304.Gausselim_types.arr
                               ((t_309 * t_304.Gausselim_types.m) + j_326))
                              *
                              (Pervasives..() t_304.Gausselim_types.arr
                                 ((j_325 * t_304.Gausselim_types.m) + t_309))))
                          / (! t_307))
                   done;
                   Pervasives..()<- t_304.Gausselim_types.arr
                     ((j_325 * t_304.Gausselim_types.m) + t_310) 0)
                else ()
              done;
              t_307 := i_324);
             t_302 := ((! t_302) + 1))
        | None  -> t_308 := 0);
       t_303 := ((! t_303) + 1))
      done;
    t_304>.
  
# val resIV2 :
  (Gausselim.IntegerVector.contr ->
   Gausselim.OutDet(Gausselim.IntegerVector)(Gausselim.IDet).res)
  code = .<
  fun a_327  ->
    let t_328 = Pervasives.ref 0 in
    let t_329 = Pervasives.ref 0 in
    let t_330 =
      {
        a_327 with
        Gausselim_types.arr = (Array.copy a_327.Gausselim_types.arr)
      } in
    let t_331 = a_327.Gausselim_types.m in
    let t_332 = a_327.Gausselim_types.n in
    let t_333 = Pervasives.ref 1 in
    let t_334 = Pervasives.ref 1 in
    while ((! t_329) < t_331) && ((! t_328) < t_332) do
      (let t_335 = ! t_328 in
       let t_336 = ! t_329 in
       let t_337 = Pervasives.ref None in
       let t_349 =
         for j_346 = t_335 to t_332 - 1 do
           (let t_347 =
              Pervasives..() t_330.Gausselim_types.arr
                ((j_346 * t_330.Gausselim_types.m) + t_336) in
            if Pervasives.not (t_347 = 0)
            then
              match ! t_337 with
              | Some i_348 ->
                  (if
                     (Pervasives.abs (Pervasives.snd i_348)) >
                       (Pervasives.abs t_347)
                   then t_337 := (Some (j_346, t_347))
                   else ())
              | None  -> t_337 := (Some (j_346, t_347))
            else ())
         done;
         (match ! t_337 with
          | Some i_338 ->
              (if (Pervasives.fst i_338) <> t_335
               then
                 ((let a_339 = t_330.Gausselim_types.arr
                   and n_340 = t_330.Gausselim_types.n
                   and m_341 = t_330.Gausselim_types.m in
                   let i1_342 = t_335 * m_341
                   and i2_343 = (Pervasives.fst i_338) * m_341 in
                   for i_344 = 0 to m_341 - 1 do
                     let t_345 = Pervasives..() a_339 (i1_342 + i_344) in
                     Pervasives..()<- a_339 (i1_342 + i_344)
                       (Pervasives..() a_339 (i2_343 + i_344));
                     Pervasives..()<- a_339 (i2_343 + i_344) t_345
                   done);
                  t_334 := (- (! t_334)))
               else ();
               Some (Pervasives.snd i_338))
          | None  -> None) in
       (match t_349 with
        | Some i_350 ->
            ((for j_351 = t_335 + 1 to t_332 - 1 do
                if
                  Pervasives.not
                    ((Pervasives..() t_330.Gausselim_types.arr
                        ((j_351 * t_330.Gausselim_types.m) + t_336))
                       = 0)
                then
                  (for j_352 = t_336 + 1 to t_331 - 1 do
                     Pervasives..()<- t_330.Gausselim_types.arr
                       ((j_351 * t_330.Gausselim_types.m) + j_352)
                       ((((Pervasives..() t_330.Gausselim_types.arr
                             ((j_351 * t_330.Gausselim_types.m) + j_352))
                            *
                            (Pervasives..() t_330.Gausselim_types.arr
                               ((t_335 * t_330.Gausselim_types.m) + t_336)))
                           -
                           ((Pervasives..() t_330.Gausselim_types.arr
                               ((t_335 * t_330.Gausselim_types.m) + j_352))
                              *
                              (Pervasives..() t_330.Gausselim_types.arr
                                 ((j_351 * t_330.Gausselim_types.m) + t_335))))
                          / (! t_333))
                   done;
                   Pervasives..()<- t_330.Gausselim_types.arr
                     ((j_351 * t_330.Gausselim_types.m) + t_336) 0)
                else ()
              done;
              t_333 := i_350);
             t_328 := ((! t_328) + 1))
        | None  -> t_334 := 0);
       t_329 := ((! t_329) + 1))
      done;
    (t_330,
      (if (! t_334) = 0
       then 0
       else if (! t_334) = 1 then ! t_333 else - (! t_333)))>.
  
# val resIV3 :
  (Gausselim.IntegerVector.contr ->
   Gausselim.OutRank(Gausselim.IntegerVector)(Gausselim.Rank).res)
  code = .<
  fun a_353  ->
    let t_354 = Pervasives.ref 0 in
    let t_355 = Pervasives.ref 0 in
    let t_356 =
      {
        a_353 with
        Gausselim_types.arr = (Array.copy a_353.Gausselim_types.arr)
      } in
    let t_357 = a_353.Gausselim_types.m in
    let t_358 = a_353.Gausselim_types.n in
    let t_359 = Pervasives.ref 1 in
    let t_360 = Pervasives.ref 1 in
    while ((! t_355) < t_357) && ((! t_354) < t_358) do
      (let t_361 = ! t_354 in
       let t_362 = ! t_355 in
       let t_363 = Pervasives.ref None in
       let t_375 =
         for j_372 = t_361 to t_358 - 1 do
           (let t_373 =
              Pervasives..() t_356.Gausselim_types.arr
                ((j_372 * t_356.Gausselim_types.m) + t_362) in
            if Pervasives.not (t_373 = 0)
            then
              match ! t_363 with
              | Some i_374 ->
                  (if
                     (Pervasives.abs (Pervasives.snd i_374)) >
                       (Pervasives.abs t_373)
                   then t_363 := (Some (j_372, t_373))
                   else ())
              | None  -> t_363 := (Some (j_372, t_373))
            else ())
         done;
         (match ! t_363 with
          | Some i_364 ->
              (if (Pervasives.fst i_364) <> t_361
               then
                 ((let a_365 = t_356.Gausselim_types.arr
                   and n_366 = t_356.Gausselim_types.n
                   and m_367 = t_356.Gausselim_types.m in
                   let i1_368 = t_361 * m_367
                   and i2_369 = (Pervasives.fst i_364) * m_367 in
                   for i_370 = 0 to m_367 - 1 do
                     let t_371 = Pervasives..() a_365 (i1_368 + i_370) in
                     Pervasives..()<- a_365 (i1_368 + i_370)
                       (Pervasives..() a_365 (i2_369 + i_370));
                     Pervasives..()<- a_365 (i2_369 + i_370) t_371
                   done);
                  ())
               else ();
               Some (Pervasives.snd i_364))
          | None  -> None) in
       (match t_375 with
        | Some i_376 ->
            ((for j_377 = t_361 + 1 to t_358 - 1 do
                if
                  Pervasives.not
                    ((Pervasives..() t_356.Gausselim_types.arr
                        ((j_377 * t_356.Gausselim_types.m) + t_362))
                       = 0)
                then
                  (for j_378 = t_362 + 1 to t_357 - 1 do
                     Pervasives..()<- t_356.Gausselim_types.arr
                       ((j_377 * t_356.Gausselim_types.m) + j_378)
                       ((((Pervasives..() t_356.Gausselim_types.arr
                             ((j_377 * t_356.Gausselim_types.m) + j_378))
                            *
                            (Pervasives..() t_356.Gausselim_types.arr
                               ((t_361 * t_356.Gausselim_types.m) + t_362)))
                           -
                           ((Pervasives..() t_356.Gausselim_types.arr
                               ((t_361 * t_356.Gausselim_types.m) + j_378))
                              *
                              (Pervasives..() t_356.Gausselim_types.arr
                                 ((j_377 * t_356.Gausselim_types.m) + t_361))))
                          / (! t_359))
                   done;
                   Pervasives..()<- t_356.Gausselim_types.arr
                     ((j_377 * t_356.Gausselim_types.m) + t_362) 0)
                else ()
              done;
              t_359 := i_376);
             t_354 := ((! t_354) + 1))
        | None  -> t_360 := 0);
       t_355 := ((! t_355) + 1))
      done;
    (t_356, (! t_354))>.
  
# val resIV4 :
  (Gausselim.IntegerVector.contr ->
   Gausselim.OutDetRank(Gausselim.IntegerVector)(Gausselim.IDet)(Gausselim.Rank).res)
  code = .<
  fun a_379  ->
    let t_380 = Pervasives.ref 0 in
    let t_381 = Pervasives.ref 0 in
    let t_382 =
      {
        a_379 with
        Gausselim_types.arr = (Array.copy a_379.Gausselim_types.arr)
      } in
    let t_383 = a_379.Gausselim_types.m in
    let t_384 = a_379.Gausselim_types.n in
    let t_385 = Pervasives.ref 1 in
    let t_386 = Pervasives.ref 1 in
    while ((! t_381) < t_383) && ((! t_380) < t_384) do
      (let t_387 = ! t_380 in
       let t_388 = ! t_381 in
       let t_389 = Pervasives.ref None in
       let t_401 =
         for j_398 = t_387 to t_384 - 1 do
           (let t_399 =
              Pervasives..() t_382.Gausselim_types.arr
                ((j_398 * t_382.Gausselim_types.m) + t_388) in
            if Pervasives.not (t_399 = 0)
            then
              match ! t_389 with
              | Some i_400 ->
                  (if
                     (Pervasives.abs (Pervasives.snd i_400)) >
                       (Pervasives.abs t_399)
                   then t_389 := (Some (j_398, t_399))
                   else ())
              | None  -> t_389 := (Some (j_398, t_399))
            else ())
         done;
         (match ! t_389 with
          | Some i_390 ->
              (if (Pervasives.fst i_390) <> t_387
               then
                 ((let a_391 = t_382.Gausselim_types.arr
                   and n_392 = t_382.Gausselim_types.n
                   and m_393 = t_382.Gausselim_types.m in
                   let i1_394 = t_387 * m_393
                   and i2_395 = (Pervasives.fst i_390) * m_393 in
                   for i_396 = 0 to m_393 - 1 do
                     let t_397 = Pervasives..() a_391 (i1_394 + i_396) in
                     Pervasives..()<- a_391 (i1_394 + i_396)
                       (Pervasives..() a_391 (i2_395 + i_396));
                     Pervasives..()<- a_391 (i2_395 + i_396) t_397
                   done);
                  t_386 := (- (! t_386)))
               else ();
               Some (Pervasives.snd i_390))
          | None  -> None) in
       (match t_401 with
        | Some i_402 ->
            ((for j_403 = t_387 + 1 to t_384 - 1 do
                if
                  Pervasives.not
                    ((Pervasives..() t_382.Gausselim_types.arr
                        ((j_403 * t_382.Gausselim_types.m) + t_388))
                       = 0)
                then
                  (for j_404 = t_388 + 1 to t_383 - 1 do
                     Pervasives..()<- t_382.Gausselim_types.arr
                       ((j_403 * t_382.Gausselim_types.m) + j_404)
                       ((((Pervasives..() t_382.Gausselim_types.arr
                             ((j_403 * t_382.Gausselim_types.m) + j_404))
                            *
                            (Pervasives..() t_382.Gausselim_types.arr
                               ((t_387 * t_382.Gausselim_types.m) + t_388)))
                           -
                           ((Pervasives..() t_382.Gausselim_types.arr
                               ((t_387 * t_382.Gausselim_types.m) + j_404))
                              *
                              (Pervasives..() t_382.Gausselim_types.arr
                                 ((j_403 * t_382.Gausselim_types.m) + t_387))))
                          / (! t_385))
                   done;
                   Pervasives..()<- t_382.Gausselim_types.arr
                     ((j_403 * t_382.Gausselim_types.m) + t_388) 0)
                else ()
              done;
              t_385 := i_402);
             t_380 := ((! t_380) + 1))
        | None  -> t_386 := 0);
       t_381 := ((! t_381) + 1))
      done;
    (t_382,
      (if (! t_386) = 0
       then 0
       else if (! t_386) = 1 then ! t_385 else - (! t_385)), (! t_380))>.
  
# val resIV5 :
  (Gausselim.IntegerVector.contr ->
   Gausselim.OutDetRank(Gausselim.IntegerVector)(Gausselim.IDet)(Gausselim.Rank).res)
  code = .<
  fun a_405  ->
    let t_406 = Pervasives.ref 0 in
    let t_407 = Pervasives.ref 0 in
    let t_408 =
      {
        a_405 with
        Gausselim_types.arr = (Array.copy a_405.Gausselim_types.arr)
      } in
    let t_409 = a_405.Gausselim_types.m in
    let t_410 = a_405.Gausselim_types.n in
    let t_411 = Pervasives.ref 1 in
    let t_412 = Pervasives.ref 1 in
    while ((! t_407) < t_409) && ((! t_406) < t_410) do
      (let t_413 = ! t_406 in
       let t_414 = ! t_407 in
       let t_415 = Pervasives.ref None in
       let t_435 =
         for j_431 = t_413 to t_410 - 1 do
           for j_432 = t_414 to t_409 - 1 do
             (let t_433 =
                Pervasives..() t_408.Gausselim_types.arr
                  ((j_431 * t_408.Gausselim_types.m) + j_432) in
              if Pervasives.not (t_433 = 0)
              then
                match ! t_415 with
                | Some i_434 ->
                    (if
                       (Pervasives.abs (Pervasives.snd i_434)) >
                         (Pervasives.abs t_433)
                     then t_415 := (Some ((j_431, j_432), t_433))
                     else ())
                | None  -> t_415 := (Some ((j_431, j_432), t_433))
              else ())
           done
         done;
         (match ! t_415 with
          | Some i_416 ->
              (if (Pervasives.snd (Pervasives.fst i_416)) <> t_414
               then
                 ((let a_424 = t_408.Gausselim_types.arr
                   and nm_425 =
                     t_408.Gausselim_types.n * t_408.Gausselim_types.m
                   and m_426 = t_408.Gausselim_types.m in
                   let rec loop_427 i1_428 i2_429 =
                     if i2_429 < nm_425
                     then
                       let t_430 = Pervasives..() a_424 i1_428 in
                       (Pervasives..()<- a_424 i1_428
                          (Pervasives..() a_424 i2_429);
                        Pervasives..()<- a_424 i2_429 t_430;
                        loop_427 (i1_428 + m_426) (i2_429 + m_426)) in
                   loop_427 t_414 (Pervasives.snd (Pervasives.fst i_416)));
                  t_412 := (- (! t_412)))
               else ();
               if (Pervasives.fst (Pervasives.fst i_416)) <> t_413
               then
                 ((let a_417 = t_408.Gausselim_types.arr
                   and n_418 = t_408.Gausselim_types.n
                   and m_419 = t_408.Gausselim_types.m in
                   let i1_420 = t_413 * m_419
                   and i2_421 =
                     (Pervasives.fst (Pervasives.fst i_416)) * m_419 in
                   for i_422 = 0 to m_419 - 1 do
                     let t_423 = Pervasives..() a_417 (i1_420 + i_422) in
                     Pervasives..()<- a_417 (i1_420 + i_422)
                       (Pervasives..() a_417 (i2_421 + i_422));
                     Pervasives..()<- a_417 (i2_421 + i_422) t_423
                   done);
                  t_412 := (- (! t_412)))
               else ();
               Some (Pervasives.snd i_416))
          | None  -> None) in
       (match t_435 with
        | Some i_436 ->
            ((for j_437 = t_413 + 1 to t_410 - 1 do
                if
                  Pervasives.not
                    ((Pervasives..() t_408.Gausselim_types.arr
                        ((j_437 * t_408.Gausselim_types.m) + t_414))
                       = 0)
                then
                  (for j_438 = t_414 + 1 to t_409 - 1 do
                     Pervasives..()<- t_408.Gausselim_types.arr
                       ((j_437 * t_408.Gausselim_types.m) + j_438)
                       ((((Pervasives..() t_408.Gausselim_types.arr
                             ((j_437 * t_408.Gausselim_types.m) + j_438))
                            *
                            (Pervasives..() t_408.Gausselim_types.arr
                               ((t_413 * t_408.Gausselim_types.m) + t_414)))
                           -
                           ((Pervasives..() t_408.Gausselim_types.arr
                               ((t_413 * t_408.Gausselim_types.m) + j_438))
                              *
                              (Pervasives..() t_408.Gausselim_types.arr
                                 ((j_437 * t_408.Gausselim_types.m) + t_413))))
                          / (! t_411))
                   done;
                   Pervasives..()<- t_408.Gausselim_types.arr
                     ((j_437 * t_408.Gausselim_types.m) + t_414) 0)
                else ()
              done;
              t_411 := i_436);
             t_406 := ((! t_406) + 1))
        | None  -> t_412 := 0);
       t_407 := ((! t_407) + 1))
      done;
    (t_408,
      (if (! t_412) = 0
       then 0
       else if (! t_412) = 1 then ! t_411 else - (! t_411)), (! t_406))>.
  
# val resFA11 :
  (Gausselim.FloatArray.contr ->
   Gausselim.OutJustMatrix(Gausselim.FloatArray)(Gausselim.NoDet(Gausselim.FloatDomain)).res)
  code = .<
  fun a_439  ->
    let t_440 = Pervasives.ref 0 in
    let t_441 = Pervasives.ref 0 in
    let t_443 = Array.map (fun x_442  -> Array.copy x_442) (Array.copy a_439) in
    let t_444 = Array.length (Pervasives..() a_439 0) in
    let t_445 = Array.length a_439 in
    while ((! t_441) < t_444) && ((! t_440) < t_445) do
      (let t_446 = ! t_440 in
       let t_447 = ! t_441 in
       let t_448 = Pervasives.ref None in
       let t_457 =
         for j_453 = t_446 to t_445 - 1 do
           for j_454 = t_447 to t_444 - 1 do
             (let t_455 = Pervasives..() (Pervasives..() t_443 j_453) j_454 in
              if Pervasives.not (t_455 = 0.)
              then
                match ! t_448 with
                | Some i_456 ->
                    (if
                       (Pervasives.abs_float (Pervasives.snd i_456)) <
                         (Pervasives.abs_float t_455)
                     then t_448 := (Some ((j_453, j_454), t_455))
                     else ())
                | None  -> t_448 := (Some ((j_453, j_454), t_455))
              else ())
           done
         done;
         (match ! t_448 with
          | Some i_449 ->
              (if (Pervasives.snd (Pervasives.fst i_449)) <> t_447
               then
                 (for r_451 = 0 to (Array.length t_443) - 1 do
                    (let t_452 =
                       Pervasives..() (Pervasives..() t_443 r_451) t_447 in
                     Pervasives..()<- (Pervasives..() t_443 r_451) t_447
                       (Pervasives..() (Pervasives..() t_443 r_451)
                          (Pervasives.snd (Pervasives.fst i_449)));
                     Pervasives..()<- (Pervasives..() t_443 r_451)
                       (Pervasives.snd (Pervasives.fst i_449)) t_452)
                  done;
                  ())
               else ();
               if (Pervasives.fst (Pervasives.fst i_449)) <> t_446
               then
                 ((let t_450 = Pervasives..() t_443 t_446 in
                   Pervasives..()<- t_443 t_446
                     (Pervasives..() t_443
                        (Pervasives.fst (Pervasives.fst i_449)));
                   Pervasives..()<- t_443
                     (Pervasives.fst (Pervasives.fst i_449)) t_450);
                  ())
               else ();
               Some (Pervasives.snd i_449))
          | None  -> None) in
       (match t_457 with
        | Some i_458 ->
            ((for j_459 = t_446 + 1 to t_445 - 1 do
                if
                  Pervasives.not
                    ((Pervasives..() (Pervasives..() t_443 j_459) t_447) = 0.)
                then
                  (for j_460 = t_447 + 1 to t_444 - 1 do
                     Pervasives..()<- (Pervasives..() t_443 j_459) j_460
                       ((Pervasives..() (Pervasives..() t_443 j_459) j_460)
                          -.
                          (((Pervasives..() (Pervasives..() t_443 j_459)
                               t_447)
                              /.
                              (Pervasives..() (Pervasives..() t_443 t_446)
                                 t_447))
                             *.
                             (Pervasives..() (Pervasives..() t_443 t_446)
                                j_460)))
                   done;
                   Pervasives..()<- (Pervasives..() t_443 j_459) t_447 0.)
                else ()
              done;
              ());
             t_440 := ((! t_440) + 1))
        | None  -> ());
       t_441 := ((! t_441) + 1))
      done;
    t_443>.
  
# val resFA12 :
  (Gausselim.FloatArray.contr ->
   Gausselim.OutDet(Gausselim.FloatArray)(Gausselim.FDet).res)
  code = .<
  fun a_461  ->
    let t_462 = Pervasives.ref 0 in
    let t_463 = Pervasives.ref 0 in
    let t_465 = Array.map (fun x_464  -> Array.copy x_464) (Array.copy a_461) in
    let t_466 = Array.length (Pervasives..() a_461 0) in
    let t_467 = Array.length a_461 in
    let t_468 = Pervasives.ref 1. in
    let t_469 = Pervasives.ref 1 in
    while ((! t_463) < t_466) && ((! t_462) < t_467) do
      (let t_470 = ! t_462 in
       let t_471 = ! t_463 in
       let t_472 = Pervasives.ref None in
       let t_481 =
         for j_477 = t_470 to t_467 - 1 do
           for j_478 = t_471 to t_466 - 1 do
             (let t_479 = Pervasives..() (Pervasives..() t_465 j_477) j_478 in
              if Pervasives.not (t_479 = 0.)
              then
                match ! t_472 with
                | Some i_480 ->
                    (if
                       (Pervasives.abs_float (Pervasives.snd i_480)) <
                         (Pervasives.abs_float t_479)
                     then t_472 := (Some ((j_477, j_478), t_479))
                     else ())
                | None  -> t_472 := (Some ((j_477, j_478), t_479))
              else ())
           done
         done;
         (match ! t_472 with
          | Some i_473 ->
              (if (Pervasives.snd (Pervasives.fst i_473)) <> t_471
               then
                 (for r_475 = 0 to (Array.length t_465) - 1 do
                    (let t_476 =
                       Pervasives..() (Pervasives..() t_465 r_475) t_471 in
                     Pervasives..()<- (Pervasives..() t_465 r_475) t_471
                       (Pervasives..() (Pervasives..() t_465 r_475)
                          (Pervasives.snd (Pervasives.fst i_473)));
                     Pervasives..()<- (Pervasives..() t_465 r_475)
                       (Pervasives.snd (Pervasives.fst i_473)) t_476)
                  done;
                  t_469 := (- (! t_469)))
               else ();
               if (Pervasives.fst (Pervasives.fst i_473)) <> t_470
               then
                 ((let t_474 = Pervasives..() t_465 t_470 in
                   Pervasives..()<- t_465 t_470
                     (Pervasives..() t_465
                        (Pervasives.fst (Pervasives.fst i_473)));
                   Pervasives..()<- t_465
                     (Pervasives.fst (Pervasives.fst i_473)) t_474);
                  t_469 := (- (! t_469)))
               else ();
               Some (Pervasives.snd i_473))
          | None  -> None) in
       (match t_481 with
        | Some i_482 ->
            ((for j_483 = t_470 + 1 to t_467 - 1 do
                if
                  Pervasives.not
                    ((Pervasives..() (Pervasives..() t_465 j_483) t_471) = 0.)
                then
                  (for j_484 = t_471 + 1 to t_466 - 1 do
                     Pervasives..()<- (Pervasives..() t_465 j_483) j_484
                       ((Pervasives..() (Pervasives..() t_465 j_483) j_484)
                          -.
                          (((Pervasives..() (Pervasives..() t_465 j_483)
                               t_471)
                              /.
                              (Pervasives..() (Pervasives..() t_465 t_470)
                                 t_471))
                             *.
                             (Pervasives..() (Pervasives..() t_465 t_470)
                                j_484)))
                   done;
                   Pervasives..()<- (Pervasives..() t_465 j_483) t_471 0.)
                else ()
              done;
              t_468 := ((! t_468) *. i_482));
             t_462 := ((! t_462) + 1))
        | None  -> t_469 := 0);
       t_463 := ((! t_463) + 1))
      done;
    (t_465,
      (if (! t_469) = 0
       then 0.
       else if (! t_469) = 1 then ! t_468 else -. (! t_468)))>.
  
# val resFA13 :
  (Gausselim.FloatArray.contr ->
   Gausselim.OutRank(Gausselim.FloatArray)(Gausselim.Rank).res)
  code = .<
  fun a_485  ->
    let t_486 = Pervasives.ref 0 in
    let t_487 = Pervasives.ref 0 in
    let t_489 = Array.map (fun x_488  -> Array.copy x_488) (Array.copy a_485) in
    let t_490 = Array.length (Pervasives..() a_485 0) in
    let t_491 = Array.length a_485 in
    while ((! t_487) < t_490) && ((! t_486) < t_491) do
      (let t_492 = ! t_486 in
       let t_493 = ! t_487 in
       let t_494 = Pervasives.ref None in
       let t_503 =
         for j_499 = t_492 to t_491 - 1 do
           for j_500 = t_493 to t_490 - 1 do
             (let t_501 = Pervasives..() (Pervasives..() t_489 j_499) j_500 in
              if Pervasives.not (t_501 = 0.)
              then
                match ! t_494 with
                | Some i_502 ->
                    (if
                       (Pervasives.abs_float (Pervasives.snd i_502)) <
                         (Pervasives.abs_float t_501)
                     then t_494 := (Some ((j_499, j_500), t_501))
                     else ())
                | None  -> t_494 := (Some ((j_499, j_500), t_501))
              else ())
           done
         done;
         (match ! t_494 with
          | Some i_495 ->
              (if (Pervasives.snd (Pervasives.fst i_495)) <> t_493
               then
                 (for r_497 = 0 to (Array.length t_489) - 1 do
                    (let t_498 =
                       Pervasives..() (Pervasives..() t_489 r_497) t_493 in
                     Pervasives..()<- (Pervasives..() t_489 r_497) t_493
                       (Pervasives..() (Pervasives..() t_489 r_497)
                          (Pervasives.snd (Pervasives.fst i_495)));
                     Pervasives..()<- (Pervasives..() t_489 r_497)
                       (Pervasives.snd (Pervasives.fst i_495)) t_498)
                  done;
                  ())
               else ();
               if (Pervasives.fst (Pervasives.fst i_495)) <> t_492
               then
                 ((let t_496 = Pervasives..() t_489 t_492 in
                   Pervasives..()<- t_489 t_492
                     (Pervasives..() t_489
                        (Pervasives.fst (Pervasives.fst i_495)));
                   Pervasives..()<- t_489
                     (Pervasives.fst (Pervasives.fst i_495)) t_496);
                  ())
               else ();
               Some (Pervasives.snd i_495))
          | None  -> None) in
       (match t_503 with
        | Some i_504 ->
            ((for j_505 = t_492 + 1 to t_491 - 1 do
                if
                  Pervasives.not
                    ((Pervasives..() (Pervasives..() t_489 j_505) t_493) = 0.)
                then
                  (for j_506 = t_493 + 1 to t_490 - 1 do
                     Pervasives..()<- (Pervasives..() t_489 j_505) j_506
                       ((Pervasives..() (Pervasives..() t_489 j_505) j_506)
                          -.
                          (((Pervasives..() (Pervasives..() t_489 j_505)
                               t_493)
                              /.
                              (Pervasives..() (Pervasives..() t_489 t_492)
                                 t_493))
                             *.
                             (Pervasives..() (Pervasives..() t_489 t_492)
                                j_506)))
                   done;
                   Pervasives..()<- (Pervasives..() t_489 j_505) t_493 0.)
                else ()
              done;
              ());
             t_486 := ((! t_486) + 1))
        | None  -> ());
       t_487 := ((! t_487) + 1))
      done;
    (t_489, (! t_486))>.
  
# val resFA14 :
  (Gausselim.FloatArray.contr ->
   Gausselim.OutDetRank(Gausselim.FloatArray)(Gausselim.FDet)(Gausselim.Rank).res)
  code = .<
  fun a_507  ->
    let t_508 = Pervasives.ref 0 in
    let t_509 = Pervasives.ref 0 in
    let t_511 = Array.map (fun x_510  -> Array.copy x_510) (Array.copy a_507) in
    let t_512 = Array.length (Pervasives..() a_507 0) in
    let t_513 = Array.length a_507 in
    let t_514 = Pervasives.ref 1. in
    let t_515 = Pervasives.ref 1 in
    while ((! t_509) < t_512) && ((! t_508) < t_513) do
      (let t_516 = ! t_508 in
       let t_517 = ! t_509 in
       let t_518 = Pervasives.ref None in
       let t_527 =
         for j_523 = t_516 to t_513 - 1 do
           for j_524 = t_517 to t_512 - 1 do
             (let t_525 = Pervasives..() (Pervasives..() t_511 j_523) j_524 in
              if Pervasives.not (t_525 = 0.)
              then
                match ! t_518 with
                | Some i_526 ->
                    (if
                       (Pervasives.abs_float (Pervasives.snd i_526)) <
                         (Pervasives.abs_float t_525)
                     then t_518 := (Some ((j_523, j_524), t_525))
                     else ())
                | None  -> t_518 := (Some ((j_523, j_524), t_525))
              else ())
           done
         done;
         (match ! t_518 with
          | Some i_519 ->
              (if (Pervasives.snd (Pervasives.fst i_519)) <> t_517
               then
                 (for r_521 = 0 to (Array.length t_511) - 1 do
                    (let t_522 =
                       Pervasives..() (Pervasives..() t_511 r_521) t_517 in
                     Pervasives..()<- (Pervasives..() t_511 r_521) t_517
                       (Pervasives..() (Pervasives..() t_511 r_521)
                          (Pervasives.snd (Pervasives.fst i_519)));
                     Pervasives..()<- (Pervasives..() t_511 r_521)
                       (Pervasives.snd (Pervasives.fst i_519)) t_522)
                  done;
                  t_515 := (- (! t_515)))
               else ();
               if (Pervasives.fst (Pervasives.fst i_519)) <> t_516
               then
                 ((let t_520 = Pervasives..() t_511 t_516 in
                   Pervasives..()<- t_511 t_516
                     (Pervasives..() t_511
                        (Pervasives.fst (Pervasives.fst i_519)));
                   Pervasives..()<- t_511
                     (Pervasives.fst (Pervasives.fst i_519)) t_520);
                  t_515 := (- (! t_515)))
               else ();
               Some (Pervasives.snd i_519))
          | None  -> None) in
       (match t_527 with
        | Some i_528 ->
            ((for j_529 = t_516 + 1 to t_513 - 1 do
                if
                  Pervasives.not
                    ((Pervasives..() (Pervasives..() t_511 j_529) t_517) = 0.)
                then
                  (for j_530 = t_517 + 1 to t_512 - 1 do
                     Pervasives..()<- (Pervasives..() t_511 j_529) j_530
                       ((Pervasives..() (Pervasives..() t_511 j_529) j_530)
                          -.
                          (((Pervasives..() (Pervasives..() t_511 j_529)
                               t_517)
                              /.
                              (Pervasives..() (Pervasives..() t_511 t_516)
                                 t_517))
                             *.
                             (Pervasives..() (Pervasives..() t_511 t_516)
                                j_530)))
                   done;
                   Pervasives..()<- (Pervasives..() t_511 j_529) t_517 0.)
                else ()
              done;
              t_514 := ((! t_514) *. i_528));
             t_508 := ((! t_508) + 1))
        | None  -> t_515 := 0);
       t_509 := ((! t_509) + 1))
      done;
    (t_511,
      (if (! t_515) = 0
       then 0.
       else if (! t_515) = 1 then ! t_514 else -. (! t_514)), (! t_508))>.
  
# val resRA1 :
  (Gausselim.RationalArray.contr ->
   Gausselim.OutJustMatrix(Gausselim.RationalArray)(Gausselim.RDet).res)
  code = .<
  fun a_553  ->
    let t_554 = Pervasives.ref 0 in
    let t_555 = Pervasives.ref 0 in
    let t_557 = Array.map (fun x_556  -> Array.copy x_556) (Array.copy a_553) in
    let t_558 = Array.length (Pervasives..() a_553 0) in
    let t_559 = Array.length a_553 in
    let t_560 = Pervasives.ref (* CSP one *) in
    let t_561 = Pervasives.ref 1 in
    while ((! t_555) < t_558) && ((! t_554) < t_559) do
      (let t_562 = ! t_554 in
       let t_563 = ! t_555 in
       let t_564 = Pervasives.ref None in
       let t_571 =
         (let t_567 = Pervasives..() (Pervasives..() t_557 t_562) t_563 in
          if Pervasives.not (t_567 = (* CSP zero *))
          then t_564 := (Some (t_562, t_567))
          else
            (let rec loop_568 j_569 =
               if j_569 < t_559
               then
                 let bjc_570 =
                   Pervasives..() (Pervasives..() t_557 j_569) t_563 in
                 (if bjc_570 = (* CSP zero *)
                  then loop_568 (j_569 + 1)
                  else t_564 := (Some (j_569, bjc_570))) in
             loop_568 (t_562 + 1)));
         (match ! t_564 with
          | Some i_565 ->
              (if (Pervasives.fst i_565) <> t_562
               then
                 ((let t_566 = Pervasives..() t_557 t_562 in
                   Pervasives..()<- t_557 t_562
                     (Pervasives..() t_557 (Pervasives.fst i_565));
                   Pervasives..()<- t_557 (Pervasives.fst i_565) t_566);
                  t_561 := (- (! t_561)))
               else ();
               Some (Pervasives.snd i_565))
          | None  -> None) in
       (match t_571 with
        | Some i_572 ->
            ((for j_573 = t_562 + 1 to t_559 - 1 do
                if
                  Pervasives.not
                    ((Pervasives..() (Pervasives..() t_557 j_573) t_563) =
                       (* CSP zero *))
                then
                  (for j_574 = t_563 + 1 to t_558 - 1 do
                     Pervasives..()<- (Pervasives..() t_557 j_573) j_574
                       (Num.sub_num
                          (Pervasives..() (Pervasives..() t_557 j_573) j_574)
                          (Num.mult_num
                             (Num.div_num
                                (Pervasives..() (Pervasives..() t_557 j_573)
                                   t_563)
                                (Pervasives..() (Pervasives..() t_557 t_562)
                                   t_563))
                             (Pervasives..() (Pervasives..() t_557 t_562)
                                j_574)))
                   done;
                   Pervasives..()<- (Pervasives..() t_557 j_573) t_563
                     (* CSP zero *))
                else ()
              done;
              t_560 := (Num.mult_num (! t_560) i_572));
             t_554 := ((! t_554) + 1))
        | None  -> t_561 := 0);
       t_555 := ((! t_555) + 1))
      done;
    t_557>.
  
# val resRA2 :
  (Gausselim.RationalArray.contr ->
   Gausselim.OutDet(Gausselim.RationalArray)(Gausselim.RDet).res)
  code = .<
  fun a_575  ->
    let t_576 = Pervasives.ref 0 in
    let t_577 = Pervasives.ref 0 in
    let t_579 = Array.map (fun x_578  -> Array.copy x_578) (Array.copy a_575) in
    let t_580 = Array.length (Pervasives..() a_575 0) in
    let t_581 = Array.length a_575 in
    let t_582 = Pervasives.ref (* CSP one *) in
    let t_583 = Pervasives.ref 1 in
    while ((! t_577) < t_580) && ((! t_576) < t_581) do
      (let t_584 = ! t_576 in
       let t_585 = ! t_577 in
       let t_586 = Pervasives.ref None in
       let t_593 =
         (let t_589 = Pervasives..() (Pervasives..() t_579 t_584) t_585 in
          if Pervasives.not (t_589 = (* CSP zero *))
          then t_586 := (Some (t_584, t_589))
          else
            (let rec loop_590 j_591 =
               if j_591 < t_581
               then
                 let bjc_592 =
                   Pervasives..() (Pervasives..() t_579 j_591) t_585 in
                 (if bjc_592 = (* CSP zero *)
                  then loop_590 (j_591 + 1)
                  else t_586 := (Some (j_591, bjc_592))) in
             loop_590 (t_584 + 1)));
         (match ! t_586 with
          | Some i_587 ->
              (if (Pervasives.fst i_587) <> t_584
               then
                 ((let t_588 = Pervasives..() t_579 t_584 in
                   Pervasives..()<- t_579 t_584
                     (Pervasives..() t_579 (Pervasives.fst i_587));
                   Pervasives..()<- t_579 (Pervasives.fst i_587) t_588);
                  t_583 := (- (! t_583)))
               else ();
               Some (Pervasives.snd i_587))
          | None  -> None) in
       (match t_593 with
        | Some i_594 ->
            ((for j_595 = t_584 + 1 to t_581 - 1 do
                if
                  Pervasives.not
                    ((Pervasives..() (Pervasives..() t_579 j_595) t_585) =
                       (* CSP zero *))
                then
                  (for j_596 = t_585 + 1 to t_580 - 1 do
                     Pervasives..()<- (Pervasives..() t_579 j_595) j_596
                       (Num.sub_num
                          (Pervasives..() (Pervasives..() t_579 j_595) j_596)
                          (Num.mult_num
                             (Num.div_num
                                (Pervasives..() (Pervasives..() t_579 j_595)
                                   t_585)
                                (Pervasives..() (Pervasives..() t_579 t_584)
                                   t_585))
                             (Pervasives..() (Pervasives..() t_579 t_584)
                                j_596)))
                   done;
                   Pervasives..()<- (Pervasives..() t_579 j_595) t_585
                     (* CSP zero *))
                else ()
              done;
              t_582 := (Num.mult_num (! t_582) i_594));
             t_576 := ((! t_576) + 1))
        | None  -> t_583 := 0);
       t_577 := ((! t_577) + 1))
      done;
    (t_579,
      (if (! t_583) = 0
       then (* CSP zero *)
       else if (! t_583) = 1 then ! t_582 else Num.minus_num (! t_582)))>.
  
# val resRA3 :
  (Gausselim.RationalArray.contr ->
   Gausselim.OutRank(Gausselim.RationalArray)(Gausselim.Rank).res)
  code = .<
  fun a_597  ->
    let t_598 = Pervasives.ref 0 in
    let t_599 = Pervasives.ref 0 in
    let t_601 = Array.map (fun x_600  -> Array.copy x_600) (Array.copy a_597) in
    let t_602 = Array.length (Pervasives..() a_597 0) in
    let t_603 = Array.length a_597 in
    let t_604 = Pervasives.ref (* CSP one *) in
    let t_605 = Pervasives.ref 1 in
    while ((! t_599) < t_602) && ((! t_598) < t_603) do
      (let t_606 = ! t_598 in
       let t_607 = ! t_599 in
       let t_608 = Pervasives.ref None in
       let t_615 =
         (let t_611 = Pervasives..() (Pervasives..() t_601 t_606) t_607 in
          if Pervasives.not (t_611 = (* CSP zero *))
          then t_608 := (Some (t_606, t_611))
          else
            (let rec loop_612 j_613 =
               if j_613 < t_603
               then
                 let bjc_614 =
                   Pervasives..() (Pervasives..() t_601 j_613) t_607 in
                 (if bjc_614 = (* CSP zero *)
                  then loop_612 (j_613 + 1)
                  else t_608 := (Some (j_613, bjc_614))) in
             loop_612 (t_606 + 1)));
         (match ! t_608 with
          | Some i_609 ->
              (if (Pervasives.fst i_609) <> t_606
               then
                 ((let t_610 = Pervasives..() t_601 t_606 in
                   Pervasives..()<- t_601 t_606
                     (Pervasives..() t_601 (Pervasives.fst i_609));
                   Pervasives..()<- t_601 (Pervasives.fst i_609) t_610);
                  ())
               else ();
               Some (Pervasives.snd i_609))
          | None  -> None) in
       (match t_615 with
        | Some i_616 ->
            ((for j_617 = t_606 + 1 to t_603 - 1 do
                if
                  Pervasives.not
                    ((Pervasives..() (Pervasives..() t_601 j_617) t_607) =
                       (* CSP zero *))
                then
                  (for j_618 = t_607 + 1 to t_602 - 1 do
                     Pervasives..()<- (Pervasives..() t_601 j_617) j_618
                       (Num.sub_num
                          (Pervasives..() (Pervasives..() t_601 j_617) j_618)
                          (Num.mult_num
                             (Num.div_num
                                (Pervasives..() (Pervasives..() t_601 j_617)
                                   t_607)
                                (Pervasives..() (Pervasives..() t_601 t_606)
                                   t_607))
                             (Pervasives..() (Pervasives..() t_601 t_606)
                                j_618)))
                   done;
                   Pervasives..()<- (Pervasives..() t_601 j_617) t_607
                     (* CSP zero *))
                else ()
              done;
              t_604 := (Num.mult_num (! t_604) i_616));
             t_598 := ((! t_598) + 1))
        | None  -> t_605 := 0);
       t_599 := ((! t_599) + 1))
      done;
    (t_601, (! t_598))>.
  
# val resRA4 :
  (Gausselim.RationalArray.contr ->
   Gausselim.OutDetRank(Gausselim.RationalArray)(Gausselim.RDet)(Gausselim.Rank).res)
  code = .<
  fun a_619  ->
    let t_620 = Pervasives.ref 0 in
    let t_621 = Pervasives.ref 0 in
    let t_623 = Array.map (fun x_622  -> Array.copy x_622) (Array.copy a_619) in
    let t_624 = Array.length (Pervasives..() a_619 0) in
    let t_625 = Array.length a_619 in
    let t_626 = Pervasives.ref (* CSP one *) in
    let t_627 = Pervasives.ref 1 in
    while ((! t_621) < t_624) && ((! t_620) < t_625) do
      (let t_628 = ! t_620 in
       let t_629 = ! t_621 in
       let t_630 = Pervasives.ref None in
       let t_637 =
         (let t_633 = Pervasives..() (Pervasives..() t_623 t_628) t_629 in
          if Pervasives.not (t_633 = (* CSP zero *))
          then t_630 := (Some (t_628, t_633))
          else
            (let rec loop_634 j_635 =
               if j_635 < t_625
               then
                 let bjc_636 =
                   Pervasives..() (Pervasives..() t_623 j_635) t_629 in
                 (if bjc_636 = (* CSP zero *)
                  then loop_634 (j_635 + 1)
                  else t_630 := (Some (j_635, bjc_636))) in
             loop_634 (t_628 + 1)));
         (match ! t_630 with
          | Some i_631 ->
              (if (Pervasives.fst i_631) <> t_628
               then
                 ((let t_632 = Pervasives..() t_623 t_628 in
                   Pervasives..()<- t_623 t_628
                     (Pervasives..() t_623 (Pervasives.fst i_631));
                   Pervasives..()<- t_623 (Pervasives.fst i_631) t_632);
                  t_627 := (- (! t_627)))
               else ();
               Some (Pervasives.snd i_631))
          | None  -> None) in
       (match t_637 with
        | Some i_638 ->
            ((for j_639 = t_628 + 1 to t_625 - 1 do
                if
                  Pervasives.not
                    ((Pervasives..() (Pervasives..() t_623 j_639) t_629) =
                       (* CSP zero *))
                then
                  (for j_640 = t_629 + 1 to t_624 - 1 do
                     Pervasives..()<- (Pervasives..() t_623 j_639) j_640
                       (Num.sub_num
                          (Pervasives..() (Pervasives..() t_623 j_639) j_640)
                          (Num.mult_num
                             (Num.div_num
                                (Pervasives..() (Pervasives..() t_623 j_639)
                                   t_629)
                                (Pervasives..() (Pervasives..() t_623 t_628)
                                   t_629))
                             (Pervasives..() (Pervasives..() t_623 t_628)
                                j_640)))
                   done;
                   Pervasives..()<- (Pervasives..() t_623 j_639) t_629
                     (* CSP zero *))
                else ()
              done;
              t_626 := (Num.mult_num (! t_626) i_638));
             t_620 := ((! t_620) + 1))
        | None  -> t_627 := 0);
       t_621 := ((! t_621) + 1))
      done;
    (t_623,
      (if (! t_627) = 0
       then (* CSP zero *)
       else if (! t_627) = 1 then ! t_626 else Num.minus_num (! t_626)),
      (! t_620))>.
  
#   val rFA1 :
  Gausselim.FloatArray.contr ->
  Gausselim.OutJustMatrix(Gausselim.FloatArray)(Gausselim.NoDet(Gausselim.FloatDomain)).res =
  <fun>
# val rFA2 :
  Gausselim.FloatArray.contr ->
  Gausselim.OutDet(Gausselim.FloatArray)(Gausselim.FDet).res = <fun>
# val rFA3 :
  Gausselim.FloatArray.contr ->
  Gausselim.OutRank(Gausselim.FloatArray)(Gausselim.Rank).res = <fun>
# val rFA4 :
  Gausselim.FloatArray.contr ->
  Gausselim.OutDetRank(Gausselim.FloatArray)(Gausselim.FDet)(Gausselim.Rank).res =
  <fun>
# val rFV1 :
  Gausselim.FloatVector.contr ->
  Gausselim.OutJustMatrix(Gausselim.FloatVector)(Gausselim.FDet).res = <fun>
# val rFV2 :
  Gausselim.FloatVector.contr ->
  Gausselim.OutDet(Gausselim.FloatVector)(Gausselim.FDet).res = <fun>
# val rFV3 :
  Gausselim.FloatVector.contr ->
  Gausselim.OutRank(Gausselim.FloatVector)(Gausselim.Rank).res = <fun>
# val rFV4 :
  Gausselim.FloatVector.contr ->
  Gausselim.OutDetRank(Gausselim.FloatVector)(Gausselim.FDet)(Gausselim.Rank).res =
  <fun>
# val rFV5 :
  Gausselim.FloatVector.contr ->
  Gausselim.OutDetRank(Gausselim.FloatVector)(Gausselim.FDet)(Gausselim.Rank).res =
  <fun>
# val rIA1 :
  Gausselim.IntegerArray.contr ->
  Gausselim.OutJustMatrix(Gausselim.IntegerArray)(Gausselim.IDet).res = <fun>
# val rIA2 :
  Gausselim.IntegerArray.contr ->
  Gausselim.OutDet(Gausselim.IntegerArray)(Gausselim.IDet).res = <fun>
# val rIA3 :
  Gausselim.IntegerArray.contr ->
  Gausselim.OutRank(Gausselim.IntegerArray)(Gausselim.Rank).res = <fun>
# val rIA4 :
  Gausselim.IntegerArray.contr ->
  Gausselim.OutDetRank(Gausselim.IntegerArray)(Gausselim.IDet)(Gausselim.Rank).res =
  <fun>
# val rIV1 :
  Gausselim.IntegerVector.contr ->
  Gausselim.OutJustMatrix(Gausselim.IntegerVector)(Gausselim.NoDet(Gausselim.IntegerDomain)).res =
  <fun>
# val rIV2 :
  Gausselim.IntegerVector.contr ->
  Gausselim.OutDet(Gausselim.IntegerVector)(Gausselim.IDet).res = <fun>
# val rIV3 :
  Gausselim.IntegerVector.contr ->
  Gausselim.OutRank(Gausselim.IntegerVector)(Gausselim.Rank).res = <fun>
# val rIV4 :
  Gausselim.IntegerVector.contr ->
  Gausselim.OutDetRank(Gausselim.IntegerVector)(Gausselim.IDet)(Gausselim.Rank).res =
  <fun>
# val rIV5 :
  Gausselim.IntegerVector.contr ->
  Gausselim.OutDetRank(Gausselim.IntegerVector)(Gausselim.IDet)(Gausselim.Rank).res =
  <fun>
# val rFA11 :
  Gausselim.FloatArray.contr ->
  Gausselim.OutJustMatrix(Gausselim.FloatArray)(Gausselim.NoDet(Gausselim.FloatDomain)).res =
  <fun>
# val rFA12 :
  Gausselim.FloatArray.contr ->
  Gausselim.OutDet(Gausselim.FloatArray)(Gausselim.FDet).res = <fun>
# val rFA13 :
  Gausselim.FloatArray.contr ->
  Gausselim.OutRank(Gausselim.FloatArray)(Gausselim.Rank).res = <fun>
# val rFA14 :
  Gausselim.FloatArray.contr ->
  Gausselim.OutDetRank(Gausselim.FloatArray)(Gausselim.FDet)(Gausselim.Rank).res =
  <fun>
# val rRA1 :
  Gausselim.RationalArray.contr ->
  Gausselim.OutJustMatrix(Gausselim.RationalArray)(Gausselim.RDet).res =
  <fun>
# val rRA2 :
  Gausselim.RationalArray.contr ->
  Gausselim.OutDet(Gausselim.RationalArray)(Gausselim.RDet).res = <fun>
# val rRA3 :
  Gausselim.RationalArray.contr ->
  Gausselim.OutRank(Gausselim.RationalArray)(Gausselim.Rank).res = <fun>
# val rRA4 :
  Gausselim.RationalArray.contr ->
  Gausselim.OutDetRank(Gausselim.RationalArray)(Gausselim.RDet)(Gausselim.Rank).res =
  <fun>
#                                                   val ia0 : Gausselim.IntegerDomain.v array array = [|[|1|]|]
val ia1 : Gausselim.IntegerDomain.v array array =
  [|[|1; 2; 3|]; [|4; 13; 5|]; [|-1; 3; 0|]|]
val ia2 : Gausselim.IntegerDomain.v array array =
  [|[|1; 2; 3; 0|]; [|4; 13; 5; 0|]; [|-1; 3; 0; 0|]|]
val ia3 : Gausselim.IntegerDomain.v array array =
  [|[|1; 2; 3|]; [|4; 13; 5|]; [|-1; 3; 0|]; [|0; 0; 0|]|]
val ia4 : Gausselim.IntegerDomain.v array array =
  [|[|0; 2; 3|]; [|0; 13; 5|]; [|0; 3; 0|]|]
val ia5 : Gausselim.IntegerDomain.v array array list =
  [[|[|1|]|]; [|[|1; 2; 3|]; [|4; 13; 5|]; [|-1; 3; 0|]|];
   [|[|1; 2; 3; 0|]; [|4; 13; 5; 0|]; [|-1; 3; 0; 0|]|];
   [|[|1; 2; 3|]; [|4; 13; 5|]; [|-1; 3; 0|]; [|0; 0; 0|]|];
   [|[|0; 2; 3|]; [|0; 13; 5|]; [|0; 3; 0|]|]]
val resI11 :
  Gausselim.OutJustMatrix(Gausselim.IntegerArray)(Gausselim.IDet).res list =
  [[|[|1|]|]; [|[|1; 2; 3|]; [|0; 5; -7|]; [|0; 0; 50|]|];
   [|[|1; 2; 3; 0|]; [|0; 5; -7; 0|]; [|0; 0; 50; 0|]|];
   [|[|1; 2; 3|]; [|0; 5; -7|]; [|0; 0; 50|]; [|0; 0; 0|]|];
   [|[|0; 2; 3|]; [|0; 0; 10|]; [|0; 0; 0|]|]]
# val resI12 :
  Gausselim.OutDet(Gausselim.IntegerArray)(Gausselim.IDet).res list =
  [([|[|1|]|], 1); ([|[|1; 2; 3|]; [|0; 5; -7|]; [|0; 0; 50|]|], 50);
   ([|[|1; 2; 3; 0|]; [|0; 5; -7; 0|]; [|0; 0; 50; 0|]|], 50);
   ([|[|1; 2; 3|]; [|0; 5; -7|]; [|0; 0; 50|]; [|0; 0; 0|]|], 50);
   ([|[|0; 2; 3|]; [|0; 0; 10|]; [|0; 0; 0|]|], 0)]
# val resI13 :
  Gausselim.OutRank(Gausselim.IntegerArray)(Gausselim.Rank).res list =
  [([|[|1|]|], 1); ([|[|1; 2; 3|]; [|0; 5; -7|]; [|0; 0; 50|]|], 3);
   ([|[|1; 2; 3; 0|]; [|0; 5; -7; 0|]; [|0; 0; 50; 0|]|], 3);
   ([|[|1; 2; 3|]; [|0; 5; -7|]; [|0; 0; 50|]; [|0; 0; 0|]|], 3);
   ([|[|0; 2; 3|]; [|0; 0; 10|]; [|0; 0; 0|]|], 2)]
# val resI14 :
  Gausselim.OutDetRank(Gausselim.IntegerArray)(Gausselim.IDet)(Gausselim.Rank).res
  list =
  [([|[|1|]|], 1, 1); ([|[|1; 2; 3|]; [|0; 5; -7|]; [|0; 0; 50|]|], 50, 3);
   ([|[|1; 2; 3; 0|]; [|0; 5; -7; 0|]; [|0; 0; 50; 0|]|], 50, 3);
   ([|[|1; 2; 3|]; [|0; 5; -7|]; [|0; 0; 50|]; [|0; 0; 0|]|], 50, 3);
   ([|[|0; 2; 3|]; [|0; 0; 10|]; [|0; 0; 0|]|], 0, 2)]
#                 val iv0 : Gausselim.IntegerDomain.v Gausselim_types.container2dfromvector =
  {arr = [|1|]; n = 1; m = 1}
val iv1 : Gausselim.IntegerDomain.v Gausselim_types.container2dfromvector =
  {arr = [|1; 2; 3; 4; 13; 5; -1; 3; 0|]; n = 3; m = 3}
val iv2 : Gausselim.IntegerDomain.v Gausselim_types.container2dfromvector =
  {arr = [|1; 2; 3; 0; 4; 13; 5; 0; -1; 3; 0; 0|]; n = 3; m = 4}
val iv4 : Gausselim.IntegerDomain.v Gausselim_types.container2dfromvector =
  {arr = [|0; 2; 3; 0; 13; 5; 0; 3; 0|]; n = 3; m = 3}
val iv5 :
  Gausselim.IntegerDomain.v Gausselim_types.container2dfromvector list =
  [{arr = [|1|]; n = 1; m = 1};
   {arr = [|1; 2; 3; 4; 13; 5; -1; 3; 0|]; n = 3; m = 3};
   {arr = [|1; 2; 3; 0; 4; 13; 5; 0; -1; 3; 0; 0|]; n = 3; m = 4};
   {arr = [|0; 2; 3; 0; 13; 5; 0; 3; 0|]; n = 3; m = 3}]
val resI21 :
  Gausselim.OutJustMatrix(Gausselim.IntegerVector)(Gausselim.NoDet(Gausselim.IntegerDomain)).res
  list =
  [{arr = [|1|]; n = 1; m = 1};
   {arr = [|1; 2; 3; 0; 5; -7; 0; 0; 50|]; n = 3; m = 3};
   {arr = [|1; 2; 3; 0; 0; 5; -7; 0; 0; 0; 50; 0|]; n = 3; m = 4};
   {arr = [|0; 2; 3; 0; 0; 10; 0; 0; 0|]; n = 3; m = 3}]
# val resI22 :
  Gausselim.OutDet(Gausselim.IntegerVector)(Gausselim.IDet).res list =
  [({arr = [|1|]; n = 1; m = 1}, 1);
   ({arr = [|1; 2; 3; 0; 5; -7; 0; 0; 50|]; n = 3; m = 3}, 50);
   ({arr = [|1; 2; 3; 0; 0; 5; -7; 0; 0; 0; 50; 0|]; n = 3; m = 4}, 50);
   ({arr = [|0; 2; 3; 0; 0; 10; 0; 0; 0|]; n = 3; m = 3}, 0)]
# val resI23 :
  Gausselim.OutRank(Gausselim.IntegerVector)(Gausselim.Rank).res list =
  [({arr = [|1|]; n = 1; m = 1}, 1);
   ({arr = [|1; 2; 3; 0; 5; -7; 0; 0; 50|]; n = 3; m = 3}, 3);
   ({arr = [|1; 2; 3; 0; 0; 5; -7; 0; 0; 0; 50; 0|]; n = 3; m = 4}, 3);
   ({arr = [|0; 2; 3; 0; 0; 10; 0; 0; 0|]; n = 3; m = 3}, 2)]
# val resI24 :
  Gausselim.OutDetRank(Gausselim.IntegerVector)(Gausselim.IDet)(Gausselim.Rank).res
  list =
  [({arr = [|1|]; n = 1; m = 1}, 1, 1);
   ({arr = [|1; 2; 3; 0; 5; -7; 0; 0; 50|]; n = 3; m = 3}, 50, 3);
   ({arr = [|1; 2; 3; 0; 0; 5; -7; 0; 0; 0; 50; 0|]; n = 3; m = 4}, 50, 3);
   ({arr = [|0; 2; 3; 0; 0; 10; 0; 0; 0|]; n = 3; m = 3}, 0, 2)]
# val resI25 :
  Gausselim.OutDetRank(Gausselim.IntegerVector)(Gausselim.IDet)(Gausselim.Rank).res
  list =
  [({arr = [|1|]; n = 1; m = 1}, 1, 1);
   ({arr = [|1; 3; 2; 0; 3; 5; 0; 0; 50|]; n = 3; m = 3}, 50, 3);
   ({arr = [|1; 3; 2; 0; 0; 3; 5; 0; 0; 0; 50; 0|]; n = 3; m = 4}, 50, 3);
   ({arr = [|2; 3; 0; 0; -9; 0; 0; 0; 0|]; n = 3; m = 3}, 0, 2)]
#   val fa0 : float array array = [|[|1.|]|]
#         val fa1 : float array array =
  [|[|1.; 2.; 3.|]; [|4.; 13.; 5.|]; [|-1.; 3.; 0.|]|]
#         val fa2 : float array array =
  [|[|1.; 2.; 3.; 0.|]; [|4.; 13.; 5.; 0.|]; [|-1.; 3.; 0.; 0.|]|]
#           val fa3 : float array array =
  [|[|1.; 2.; 3.|]; [|4.; 13.; 5.|]; [|-1.; 3.; 0.|]; [|0.; 0.; 0.|]|]
#           val fa4 : float array array =
  [|[|0.; 2.; 3.|]; [|0.; 10.; 5.|]; [|0.; 3.; 0.|]|]
#                                     val fa5 : Gausselim.FloatDomain.v array array list =
  [[|[|1.|]|]; [|[|1.; 2.; 3.|]; [|4.; 13.; 5.|]; [|-1.; 3.; 0.|]|];
   [|[|1.; 2.; 3.; 0.|]; [|4.; 13.; 5.; 0.|]; [|-1.; 3.; 0.; 0.|]|];
   [|[|1.; 2.; 3.|]; [|4.; 13.; 5.|]; [|-1.; 3.; 0.|]; [|0.; 0.; 0.|]|];
   [|[|0.; 2.; 3.|]; [|0.; 10.; 5.|]; [|0.; 3.; 0.|]|]]
val resF1 :
  Gausselim.OutJustMatrix(Gausselim.FloatArray)(Gausselim.NoDet(Gausselim.FloatDomain)).res
  list =
  [[|[|1.|]|]; [|[|4.; 13.; 5.|]; [|0.; 6.25; 1.25|]; [|0.; 0.; 2.|]|];
   [|[|4.; 13.; 5.; 0.|]; [|0.; 6.25; 1.25; 0.|]; [|0.; 0.; 2.; 0.|]|];
   [|[|4.; 13.; 5.|]; [|0.; 6.25; 1.25|]; [|0.; 0.; 2.|]; [|0.; 0.; 0.|]|];
   [|[|0.; 10.; 5.|]; [|0.; 0.; 2.|]; [|0.; 0.; 0.|]|]]
#                                                                                                 val a2v : 'a array array -> 'a Gausselim_types.container2dfromvector = <fun>
val xxx : Gausselim.FloatDomain.v Gausselim_types.container2dfromvector list =
  [{arr = [|1.|]; n = 1; m = 1};
   {arr = [|1.; 2.; 3.; 4.; 13.; 5.; -1.; 3.; 0.|]; n = 3; m = 3};
   {arr = [|1.; 2.; 3.; 0.; 4.; 13.; 5.; 0.; -1.; 3.; 0.; 0.|]; n = 3; m = 4};
   {arr = [|1.; 2.; 3.; 4.; 13.; 5.; -1.; 3.; 0.; 0.; 0.; 0.|]; n = 4; m = 3};
   {arr = [|0.; 2.; 3.; 0.; 10.; 5.; 0.; 3.; 0.|]; n = 3; m = 3}]
val resFV5 :
  Gausselim.OutDetRank(Gausselim.FloatVector)(Gausselim.FDet)(Gausselim.Rank).res
  list =
  [({arr = [|1.|]; n = 1; m = 1}, 1., 1);
   ({arr =
      [|13.; 5.; 4.; 0.; 2.23076923076923084; 0.384615384615384581; 0.; 0.;
        -1.72413793103448287|];
     n = 3; m = 3},
    50., 3);
   ({arr =
      [|13.; 5.; 4.; 0.; 0.; 2.23076923076923084; 0.384615384615384581; 0.;
        0.; 0.; -1.72413793103448287; 0.|];
     n = 3; m = 4},
    50., 3);
   ({arr =
      [|13.; 5.; 4.; 0.; 2.23076923076923084; 0.384615384615384581; 0.; 0.;
        -1.72413793103448287; 0.; 0.; 0.|];
     n = 4; m = 3},
    50., 3);
   ({arr = [|10.; 5.; 0.; 0.; 2.; 0.; 0.; 0.; 0.|]; n = 3; m = 3}, 0., 2)]
val resF11 :
  Gausselim.OutJustMatrix(Gausselim.FloatArray)(Gausselim.NoDet(Gausselim.FloatDomain)).res
  list =
  [[|[|1.|]|];
   [|[|13.; 5.; 4.|]; [|0.; 2.23076923076923084; 0.384615384615384581|];
     [|0.; 0.; -1.72413793103448287|]|];
   [|[|13.; 5.; 4.; 0.|];
     [|0.; 2.23076923076923084; 0.384615384615384581; 0.|];
     [|0.; 0.; -1.72413793103448287; 0.|]|];
   [|[|13.; 5.; 4.|]; [|0.; 2.23076923076923084; 0.384615384615384581|];
     [|0.; 0.; -1.72413793103448287|]; [|0.; 0.; 0.|]|];
   [|[|10.; 5.; 0.|]; [|0.; 2.; 0.|]; [|0.; 0.; 0.|]|]]
# val resF12 : Gausselim.OutDet(Gausselim.FloatArray)(Gausselim.FDet).res list =
  [([|[|1.|]|], 1.);
   ([|[|13.; 5.; 4.|]; [|0.; 2.23076923076923084; 0.384615384615384581|];
      [|0.; 0.; -1.72413793103448287|]|],
    50.);
   ([|[|13.; 5.; 4.; 0.|];
      [|0.; 2.23076923076923084; 0.384615384615384581; 0.|];
      [|0.; 0.; -1.72413793103448287; 0.|]|],
    50.);
   ([|[|13.; 5.; 4.|]; [|0.; 2.23076923076923084; 0.384615384615384581|];
      [|0.; 0.; -1.72413793103448287|]; [|0.; 0.; 0.|]|],
    50.);
   ([|[|10.; 5.; 0.|]; [|0.; 2.; 0.|]; [|0.; 0.; 0.|]|], 0.)]
# val resF13 : Gausselim.OutRank(Gausselim.FloatArray)(Gausselim.Rank).res list =
  [([|[|1.|]|], 1);
   ([|[|13.; 5.; 4.|]; [|0.; 2.23076923076923084; 0.384615384615384581|];
      [|0.; 0.; -1.72413793103448287|]|],
    3);
   ([|[|13.; 5.; 4.; 0.|];
      [|0.; 2.23076923076923084; 0.384615384615384581; 0.|];
      [|0.; 0.; -1.72413793103448287; 0.|]|],
    3);
   ([|[|13.; 5.; 4.|]; [|0.; 2.23076923076923084; 0.384615384615384581|];
      [|0.; 0.; -1.72413793103448287|]; [|0.; 0.; 0.|]|],
    3);
   ([|[|10.; 5.; 0.|]; [|0.; 2.; 0.|]; [|0.; 0.; 0.|]|], 2)]
# val resF14 :
  Gausselim.OutDetRank(Gausselim.FloatArray)(Gausselim.FDet)(Gausselim.Rank).res
  list =
  [([|[|1.|]|], 1., 1);
   ([|[|13.; 5.; 4.|]; [|0.; 2.23076923076923084; 0.384615384615384581|];
      [|0.; 0.; -1.72413793103448287|]|],
    50., 3);
   ([|[|13.; 5.; 4.; 0.|];
      [|0.; 2.23076923076923084; 0.384615384615384581; 0.|];
      [|0.; 0.; -1.72413793103448287; 0.|]|],
    50., 3);
   ([|[|13.; 5.; 4.|]; [|0.; 2.23076923076923084; 0.384615384615384581|];
      [|0.; 0.; -1.72413793103448287|]; [|0.; 0.; 0.|]|],
    50., 3);
   ([|[|10.; 5.; 0.|]; [|0.; 2.; 0.|]; [|0.; 0.; 0.|]|], 0., 2)]
#   val ra0 : Num.num array array = [|[|Num.Int 1|]|]
#           val ra1 : Num.num array array =
  [|[|Num.Int 1; Num.Int 2; Num.Int 3|];
    [|Num.Int 4; Num.Int 13; Num.Int 5|];
    [|Num.Int (-1); Num.Int 3; Num.Int 0|]|]
#           val ra2 : Num.num array array =
  [|[|Num.Int 1; Num.Int 2; Num.Int 3; Num.Int 0|];
    [|Num.Int 4; Num.Int 13; Num.Int 5; Num.Int 0|];
    [|Num.Int (-1); Num.Int 3; Num.Int 0; Num.Int 0|]|]
#             val ra3 : Num.num array array =
  [|[|Num.Int 1; Num.Int 2; Num.Int 3|];
    [|Num.Int 4; Num.Int 13; Num.Int 5|];
    [|Num.Int (-1); Num.Int 3; Num.Int 0|];
    [|Num.Int 0; Num.Int 0; Num.Int 0|]|]
#           val ra4 : Num.num array array =
  [|[|Num.Int 0; Num.Int 2; Num.Int 3|];
    [|Num.Int 0; Num.Int 13; Num.Int 5|];
    [|Num.Int 0; Num.Int 3; Num.Int 0|]|]
# val ra5 : Num.num array array list =
  [[|[|Num.Int 1|]|];
   [|[|Num.Int 1; Num.Int 2; Num.Int 3|];
     [|Num.Int 4; Num.Int 13; Num.Int 5|];
     [|Num.Int (-1); Num.Int 3; Num.Int 0|]|];
   [|[|Num.Int 1; Num.Int 2; Num.Int 3; Num.Int 0|];
     [|Num.Int 4; Num.Int 13; Num.Int 5; Num.Int 0|];
     [|Num.Int (-1); Num.Int 3; Num.Int 0; Num.Int 0|]|];
   [|[|Num.Int 1; Num.Int 2; Num.Int 3|];
     [|Num.Int 4; Num.Int 13; Num.Int 5|];
     [|Num.Int (-1); Num.Int 3; Num.Int 0|];
     [|Num.Int 0; Num.Int 0; Num.Int 0|]|];
   [|[|Num.Int 0; Num.Int 2; Num.Int 3|];
     [|Num.Int 0; Num.Int 13; Num.Int 5|];
     [|Num.Int 0; Num.Int 3; Num.Int 0|]|]]
#   val resR11 :
  Gausselim.OutJustMatrix(Gausselim.RationalArray)(Gausselim.RDet).res list =
  [[|[|Num.Int 1|]|];
   [|[|Num.Int 1; Num.Int 2; Num.Int 3|];
     [|Num.Int 0; Num.Int 5; Num.Int (-7)|];
     [|Num.Int 0; Num.Int 0; Num.Int 10|]|];
   [|[|Num.Int 1; Num.Int 2; Num.Int 3; Num.Int 0|];
     [|Num.Int 0; Num.Int 5; Num.Int (-7); Num.Int 0|];
     [|Num.Int 0; Num.Int 0; Num.Int 10; Num.Int 0|]|];
   [|[|Num.Int 1; Num.Int 2; Num.Int 3|];
     [|Num.Int 0; Num.Int 5; Num.Int (-7)|];
     [|Num.Int 0; Num.Int 0; Num.Int 10|];
     [|Num.Int 0; Num.Int 0; Num.Int 0|]|];
   [|[|Num.Int 0; Num.Int 2; Num.Int 3|];
     [|Num.Int 0; Num.Int 0; Num.Ratio <abstr>|];
     [|Num.Int 0; Num.Int 0; Num.Int 0|]|]]
# val resR12 :
  Gausselim.OutDet(Gausselim.RationalArray)(Gausselim.RDet).res list =
  [([|[|Num.Int 1|]|], Num.Int 1);
   ([|[|Num.Int 1; Num.Int 2; Num.Int 3|];
      [|Num.Int 0; Num.Int 5; Num.Int (-7)|];
      [|Num.Int 0; Num.Int 0; Num.Int 10|]|],
    Num.Int 50);
   ([|[|Num.Int 1; Num.Int 2; Num.Int 3; Num.Int 0|];
      [|Num.Int 0; Num.Int 5; Num.Int (-7); Num.Int 0|];
      [|Num.Int 0; Num.Int 0; Num.Int 10; Num.Int 0|]|],
    Num.Int 50);
   ([|[|Num.Int 1; Num.Int 2; Num.Int 3|];
      [|Num.Int 0; Num.Int 5; Num.Int (-7)|];
      [|Num.Int 0; Num.Int 0; Num.Int 10|];
      [|Num.Int 0; Num.Int 0; Num.Int 0|]|],
    Num.Int 50);
   ([|[|Num.Int 0; Num.Int 2; Num.Int 3|];
      [|Num.Int 0; Num.Int 0; Num.Ratio <abstr>|];
      [|Num.Int 0; Num.Int 0; Num.Int 0|]|],
    Num.Int 0)]
# val resR13 :
  Gausselim.OutRank(Gausselim.RationalArray)(Gausselim.Rank).res list =
  [([|[|Num.Int 1|]|], 1);
   ([|[|Num.Int 1; Num.Int 2; Num.Int 3|];
      [|Num.Int 0; Num.Int 5; Num.Int (-7)|];
      [|Num.Int 0; Num.Int 0; Num.Int 10|]|],
    3);
   ([|[|Num.Int 1; Num.Int 2; Num.Int 3; Num.Int 0|];
      [|Num.Int 0; Num.Int 5; Num.Int (-7); Num.Int 0|];
      [|Num.Int 0; Num.Int 0; Num.Int 10; Num.Int 0|]|],
    3);
   ([|[|Num.Int 1; Num.Int 2; Num.Int 3|];
      [|Num.Int 0; Num.Int 5; Num.Int (-7)|];
      [|Num.Int 0; Num.Int 0; Num.Int 10|];
      [|Num.Int 0; Num.Int 0; Num.Int 0|]|],
    3);
   ([|[|Num.Int 0; Num.Int 2; Num.Int 3|];
      [|Num.Int 0; Num.Int 0; Num.Ratio <abstr>|];
      [|Num.Int 0; Num.Int 0; Num.Int 0|]|],
    2)]
# val resR14 :
  Gausselim.OutDetRank(Gausselim.RationalArray)(Gausselim.RDet)(Gausselim.Rank).res
  list =
  [([|[|Num.Int 1|]|], Num.Int 1, 1);
   ([|[|Num.Int 1; Num.Int 2; Num.Int 3|];
      [|Num.Int 0; Num.Int 5; Num.Int (-7)|];
      [|Num.Int 0; Num.Int 0; Num.Int 10|]|],
    Num.Int 50, 3);
   ([|[|Num.Int 1; Num.Int 2; Num.Int 3; Num.Int 0|];
      [|Num.Int 0; Num.Int 5; Num.Int (-7); Num.Int 0|];
      [|Num.Int 0; Num.Int 0; Num.Int 10; Num.Int 0|]|],
    Num.Int 50, 3);
   ([|[|Num.Int 1; Num.Int 2; Num.Int 3|];
      [|Num.Int 0; Num.Int 5; Num.Int (-7)|];
      [|Num.Int 0; Num.Int 0; Num.Int 10|];
      [|Num.Int 0; Num.Int 0; Num.Int 0|]|],
    Num.Int 50, 3);
   ([|[|Num.Int 0; Num.Int 2; Num.Int 3|];
      [|Num.Int 0; Num.Int 0; Num.Ratio <abstr>|];
      [|Num.Int 0; Num.Int 0; Num.Int 0|]|],
    Num.Int 0, 2)]
# 
